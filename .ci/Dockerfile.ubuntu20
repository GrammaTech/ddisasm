# ------------------------------------------------------------------------------
# Build Souffle
# ------------------------------------------------------------------------------
FROM ubuntu:20.04 AS souffle

RUN ln -fs /usr/share/zoneinfo/America/New_York /etc/localtime

RUN apt-get -y update && \
    apt-get -y install \
      automake \
      bison \
      build-essential \
      cmake \
      doxygen \
      flex \
      git \
      libffi-dev \
      libsqlite3-dev \
      libtool \
      lsb-release \
      mcpp \
      python \
      sqlite3 \
      zlib1g-dev && \
    rm -rf /var/lib/apt/lists/*

RUN git clone -b 2.4 https://github.com/souffle-lang/souffle && \
    cd souffle && \
    cmake . -Bbuild -DCMAKE_BUILD_TYPE=Release -DSOUFFLE_USE_CURSES=0 -DSOUFFLE_USE_SQLITE=0 -DSOUFFLE_DOMAIN_64BIT=1 && \
    make -C build install -j4

# ------------------------------------------------------------------------------
# Install LIEF
# ------------------------------------------------------------------------------
FROM ubuntu:20.04 AS lief

RUN ln -fs /usr/share/zoneinfo/America/New_York /etc/localtime

RUN apt-get -y update && \
    apt-get -y install \
      build-essential \
      cmake \
      git \
      python3 \
      python3-pip \
      wget

# Install CMake 3.24.0 (needed by LIEF 0.16.6)
ENV CMAKE_VERSION=3.24.0
RUN wget https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-linux-x86_64.tar.gz && \
    tar -xzf cmake-${CMAKE_VERSION}-linux-x86_64.tar.gz && \
    mv cmake-${CMAKE_VERSION}-linux-x86_64 /opt/cmake && \
    rm /usr/bin/cmake && \
    ln -s /opt/cmake/bin/cmake /usr/bin/cmake && \
    rm cmake-${CMAKE_VERSION}-linux-x86_64.tar.gz

RUN pip install conan==1.59 && \
    conan profile new default --detect && \
    conan remote add rewriting_remote https://git.grammatech.com/api/v4/packages/conan

ENV LIEF_VERSION="0.16.6"

RUN echo "[requires]\n\
lief/${LIEF_VERSION}@rewriting+extra-packages/stable\n\
\n\
[generators]\n\
CMakeDeps\n\
CMakeToolchain" > /tmp/conanfile.txt

RUN conan install /tmp/conanfile.txt \
    --build=missing \
    --remote=rewriting_remote \
    -pr:b=default -pr:h=default

RUN PKG_DIR=$(find /root/.conan/data/lief/${LIEF_VERSION}/rewriting+extra-packages/stable/package -mindepth 1 -maxdepth 1 -type d) && \
    mkdir -p /opt/lief-pkg && \
    cp -a $PKG_DIR/include /opt/lief-pkg/ && \
    cp -a $PKG_DIR/lib /opt/lief-pkg/ && \
    cp -a $PKG_DIR/lib/cmake /opt/lief-pkg/ && \
    cp -a $PKG_DIR/lib/pkgconfig /opt/lief-pkg/ || true

# ------------------------------------------------------------------------------
# Build libehp
# ------------------------------------------------------------------------------
FROM ubuntu:20.04 AS libehp

RUN ln -fs /usr/share/zoneinfo/America/New_York /etc/localtime

RUN apt-get -y update && \
    apt-get -y install \
      build-essential \
      cmake \
      git

RUN git clone https://github.com/GrammaTech/libehp.git /usr/local/src/libehp && \
    git -C /usr/local/src/libehp reset --hard 5e41e26b88d415f3c7d3eb47f9f0d781cc519459 && \
    cmake -DCMAKE_CXX_COMPILER=g++ -DCMAKE_BUILD_TYPE=Release -DEHP_BUILD_SHARED_LIBS=OFF /usr/local/src/libehp -B/usr/local/src/libehp/build && \
    cmake --build /usr/local/src/libehp/build -j4 --target install

# ------------------------------------------------------------------------------
# Build UASM
# ------------------------------------------------------------------------------
FROM ubuntu:14.04 as UASM

RUN ln -fs /usr/share/zoneinfo/America/New_York /etc/localtime

RUN apt-get update -y && \
    apt-get install -y \
      clang-3.8 \
      make \
      git && \
    rm -rf /var/lib/apt/lists/*

RUN git clone -b v2.50 https://github.com/Terraspace/UASM /usr/local/src/UASM && \
    cd /usr/local/src/UASM && \
    make -f Makefile_Linux && \
    install GccUnixR/uasm /usr/local/bin

# ------------------------------------------------------------------------------
# Final image
# ------------------------------------------------------------------------------
FROM ubuntu:20.04

# Use BASH for downstream projects that rely on it (e.g. ddisasm-exp).
SHELL ["/bin/bash", "-c"]

RUN ln -fs /usr/share/zoneinfo/America/New_York /etc/localtime

# Install APT packages
#
# Note that multilib dependencies must be installed with care to support cross-
# compilation for all architecture. We do not use the `gcc-multilib' package,
# which will conflict with and automatically remove ARM packages. Instead we use
# the `libc6-dev-i386-cross' package and manually link its paths to the standard
# multilib locations.
#
# See: https://bugs.launchpad.net/ubuntu/+source/gcc-defaults/+bug/1300211
#
RUN apt-get -y update && \
    apt-get -y install \
        aptitude \
        autoconf \
        build-essential \
        ccache \
        clang \
        clang-format \
        cmake \
        curl \
        doxygen \
        git \
        lib32gcc-9-dev \
        lib32stdc++-9-dev \
        libc6-dev-i386-cross \
        libprotobuf-dev \
        libprotoc-dev \
        libtool \
        libboost-dev \
        libboost-filesystem-dev \
        libboost-filesystem1.71.0 \
        libboost-program-options-dev \
        libboost-program-options1.71.0 \
        libboost-system-dev \
        libboost-system1.71.0 \
        mingw-w64-i686-dev \
        gcc-arm-linux-gnueabihf \
        g++-arm-linux-gnueabihf \
        gcc-aarch64-linux-gnu \
        g++-aarch64-linux-gnu \
        gcc-mingw-w64-i686 \
        g++-mingw-w64-i686 \
        gcc-mips-linux-gnu \
        g++-mips-linux-gnu \
        make \
        mcpp \
        pkg-config \
        protobuf-compiler \
        python3 \
        python3-pip \
        python3-setuptools \
        python3-venv \
        qemu-user \
        software-properties-common \
        unzip \
        wget \
        zlib1g-dev && \
    ln -s /usr/i686-linux-gnu/lib/ /usr/lib/i386-linux-gnu && \
    ln -s /usr/i686-linux-gnu/include /usr/include/i386-linux-gnu && \
    rm -rf /var/lib/apt/lists/*

# Create shared library cache for /usr/mips-linux-gnu/lib.
RUN cd /usr/mips-linux-gnu && \
    mkdir etc && \
    ldconfig -c etc/ld.do.cache -r .

# Install WINE environment
#
# Note that this must be done after installing `libc6-dev-i386-cross' and
# and linking its paths to the standard multilib locations, i.e. we merge
# the lib and include paths of /usr/i686-linux-gnu and /usr/i386-linux-gnu.
#
RUN dpkg --add-architecture i386 && \
    apt-get -y update && \
    apt-get -y install wine-stable wine32 && \
    rm -rf /var/lib/apt/lists/*
RUN winepath
ENV WINEPATH="/usr/lib/gcc/i686-w64-mingw32/9.3-win32"

# Install Python dependencies
RUN python3 -m pip install --no-cache-dir --upgrade pip && \
    python3 -m pip install --no-cache-dir \
    pyyaml \
    psycopg2-binary \
    networkx \
    pre-commit \
    pydot \
    sphinx \
    lief==0.16.6

# Setup pre-commit hooks.
WORKDIR /ddisasm
COPY .pre-commit-config.yaml .
RUN git init && \
    pre-commit install-hooks

COPY --from=souffle /usr/local/bin/souffle* /usr/local/bin/
COPY --from=souffle /usr/local/include/souffle/ /usr/local/include/souffle
COPY --from=lief /opt/lief-pkg/lib/libLIEF.a /usr/lib/libLIEF.a
COPY --from=lief /opt/lief-pkg/lib/cmake/LIEF /usr/lib/cmake/LIEF
COPY --from=lief /opt/lief-pkg/include/LIEF /usr/include/LIEF
COPY --from=libehp /usr/local/lib /usr/local/lib
COPY --from=libehp /usr/local/include /usr/local/include
COPY --from=UASM /usr/local/bin/uasm /usr/local/bin/uasm

# Install sstrip
COPY etc/sstrip /usr/bin/sstrip
