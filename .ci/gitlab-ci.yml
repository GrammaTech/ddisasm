variables:
  GTIRB_BRANCH: "release-1.10.7"
  GTIRB_PPRINTER_BRANCH: "release-1.8.3"
  CAPSTONE_BRANCH: "capstone-5.0.0-gt2"
  # The IMAGE_TAG is derived from the branch name so that if a branch modifies
  # the CI images, it builds and runs using the new images without conflicting
  # with main.
  IMAGE_TAG: "$CI_COMMIT_REF_SLUG"
  EXTRA_INDEX_URL: https://__token__:$GL_PKG_API_TOKEN@${CI_SERVER_HOST}/api/v4/projects/1587/packages/pypi/simple
  CONAN_PASSWORD: $CI_JOB_TOKEN
  # The following two variables are used by the package-uploader
  PROJECT_ID: $CI_PROJECT_ID
  PIPELINE_ID: $CI_PIPELINE_ID

workflow:
  rules:
    # merge_train CI happens once per branch, right before merging
    # they must pass in order for the merge to go through
    - if: $CI_MERGE_REQUEST_EVENT_TYPE == "merge_train"
    # If no 'rules' are explicitly set for jobs below, they will automatically
    # run each time this pipeline runs (merge, commits, or schedules)
    - if: $CI_COMMIT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "schedule"

stages:
  - build-images
  - check-format
  - build
  - build-packages
  - test-and-tag
  - setup-package-tests
  - package-tests
  - deploy
  - deploy-to-apt

default:
  tags: [cluster]

.build-ci-image: &build-ci-image
  stage: build-images
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    # Configure authentication credentials for both Docker Hub and GitLab
    - >-
      echo "{\"auths\":{
        \"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"},
        \"https://index.docker.io/v1/\":{\"username\":\"$DOCKERHUB_USERNAME\",\"password\":\"$DOCKERHUB_PASSWORD\"}
      }}" > /kaniko/.docker/config.json
    # Run the kaniko executor, which will build our image (using a cache if available)
    # Push to our internal registry, and if on the default branch, to Docker Hub.
    #- >-
    #  if [ "$CI_COMMIT_BRANCH" = "$CI_DEFAULT_BRANCH" ] && [ "$UBUNTU_CODENAME" != "" ]; then
    #    export DOCKER_HUB_ARG="--destination=grammatech/ddisasm-ci-${UBUNTU_CODENAME}:latest"
    #  fi
    - >-
      /kaniko/executor
      --cache=true
      --cache-repo=${DOCKER_REGISTRY}/${CI_PROJECT_PATH}/${IMAGE_NAME}/cache
      --context=$CI_PROJECT_DIR
      --dockerfile=$CI_PROJECT_DIR/$DOCKERFILE_PATH
      --destination=${DOCKER_REGISTRY}/${CI_PROJECT_PATH}/${IMAGE_NAME}:$IMAGE_TAG
    #  $DOCKER_HUB_ARG

build-ci-image-ubuntu18:
  <<: *build-ci-image
  variables:
    DOCKERFILE_PATH: .ci/Dockerfile.ubuntu18
    IMAGE_NAME: ubuntu18
    UBUNTU_CODENAME: bionic

build-ci-image-ubuntu20:
  <<: *build-ci-image
  variables:
    DOCKERFILE_PATH: .ci/Dockerfile.ubuntu20
    IMAGE_NAME: ubuntu20
    UBUNTU_CODENAME: focal

build-ci-image-static:
  <<: *build-ci-image
  variables:
    DOCKERFILE_PATH: .ci/Dockerfile.static
    IMAGE_NAME: static
    UBUNTU_CODENAME: "" # Don't push to DockerHub

check-format:
  stage: check-format
  image: $DOCKER_REGISTRY/rewriting/ddisasm/ubuntu18:$IMAGE_TAG
  script:
    - |+
      pre-commit run --all-files --show-diff-on-failure || ( (cat <<EOF
      ================================================================================
      If this stage fails, the formatting of your changes may be incorrect.
      To automatically format your files, install pre-commit:
          pip3 install pre-commit
          pre-commit install
      pre-commit will now automatically format any files before commit.
      To fix any misformatted files, run:
          pre-commit run --all-files
      And then commit any changes.
      More information regarding pre-commit can be found at https://pre-commit.com.

      NOTE FOR PROJECTS WITH C/C++ CODE:
      pre-commit will by default use the correct version of every formatting tool
      EXCEPT FOR clang-format. You need to ensure the version of clang-format you
      use is EXACTLY version 6.0.0. This is available in Ubuntu 18 by default.

      See also:
          https://git.grammatech.com/research/meta/-/wikis/infrastructure/infrastructure#running-ci-jobs-locally-for-debugging
          http://otsego.grammatech.com/u4/Videos/2020-09-11-Lunchtime-Seminar/
      ================================================================================
      EOF
      ) && exit 1)

.run_only_main: &run-only-main
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  - if: '$CI_COMMIT_REF_NAME =~ /^release-.*/'
  - if: $CI_MERGE_REQUEST_EVENT_TYPE == "merge_train"
  # regular build is manual and optional
  # This only works with gitlab 13.12 or higher
  - if: $CI_COMMIT_BRANCH
    when: manual
    allow_failure: true

.conan-linux-publish-template: &conan-linux-publish-template
  image: $DOCKER_REGISTRY/rewriting/ddisasm/conan-ubuntu18
  stage: deploy
  rules:
    *run-only-main
  script:
    - export CONAN_USER_HOME=$(pwd)
    - PYTHONPATH="$(pwd):$PYTHONPATH" python3 .ci/run_conan.py upload

.conan-linux-build-template: &conan-linux-build-template
  stage: build
  needs: [check-format]
  artifacts:
    paths:
      - .conan
    # Set a short expiry time - only needed until it is published by a later job.
    expire_in: 8 hours
  rules:
    *run-only-main
  script:
    - export CONAN_USER_HOME=$(pwd)
    - pip3 install --upgrade conan
    - conan profile new default --detect
    - conan profile update settings.compiler.libcxx=libstdc++11 default
    - conan remote add gitlab ${CI_API_V4_URL}/packages/conan
    - conan user ci_user -r gitlab -p
    # Install gtirb python wheel
    - python3 -m pip install pip --upgrade && python3 -m pip install gtirb --extra-index-url=$EXTRA_INDEX_URL --pre
    # Run build script
    - PYTHONPATH="$(pwd):$PYTHONPATH" python3 .ci/run_conan.py build -s build_type=Release


build-conan-gcc7-release:
  image: $DOCKER_REGISTRY/rewriting/ddisasm/conan-ubuntu18
  <<: *conan-linux-build-template

conan-gcc7-release-publish:
  needs:
    - build-conan-gcc7-release
  dependencies: [build-conan-gcc7-release]
  <<: *conan-linux-publish-template

build-conan-gcc9-release:
  image: $DOCKER_REGISTRY/rewriting/ddisasm/conan-ubuntu20
  <<: *conan-linux-build-template

conan-gcc9-release-publish:
  needs:
    - build-conan-gcc9-release
  dependencies: [build-conan-gcc9-release]
  <<: *conan-linux-publish-template

.conan-windows-template: &conan-windows-template
  stage: build
  tags: [ddisasm-windows]
  artifacts:
    paths:
      - .conan
    # Set a short expiry time - only needed until it is published by a later job.
    expire_in: 8 hours
  script:
    - systeminfo
    - pip3 install --upgrade conan
    # Build conan packages in a directory that we can publish as an artifact.
    - export CONAN_USER_HOME=$(cygpath -w $(pwd))
    # Set up user and remote
    - conan remote add gitlab ${CI_API_V4_URL}/packages/conan
    - conan user ci_user -r gitlab -p
    # Install packages needed for the tests
    - python -m pip install pip --upgrade && python -m pip install gtirb distro --extra-index-url=$EXTRA_INDEX_URL --pre
    # Run build script
    - export PYTHONPATH="$PYTHONPATH;$(cygpath -w $(pwd))"
    - python .ci/run_conan.py build -s build_type=$BUILD_TYPE

.conan-windows-publish-template: &conan-windows-publish-template
  stage: deploy
  tags: [ddisasm-windows]
  rules:
    *run-only-main
  script:
    - export CONAN_USER_HOME=$(cygpath -w $(pwd))
    - export PYTHONPATH="$PYTHONPATH;$(cygpath -w $(pwd))"
    - python .ci/run_conan.py upload

conan-windows-debug:
  variables:
    BUILD_TYPE: Debug
  rules:
    *run-only-main
  <<: *conan-windows-template

conan-windows-debug-publish:
  needs:
    - conan-windows-debug
  variables:
    BUILD_TYPE: Debug
  dependencies: [conan-windows-debug]
  <<: *conan-windows-publish-template

conan-windows-release:
  variables:
    BUILD_TYPE: Release
  <<: *conan-windows-template

conan-windows-release-publish:
  needs:
    - conan-windows-release
  variables:
    BUILD_TYPE: Release
  dependencies: [conan-windows-release]
  <<: *conan-windows-publish-template

.build-template: &build
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - build
  script:
    - case $OS in
       ubuntu18) JOB_NAME='debian-installer-ubuntu18' ;;
       ubuntu20) JOB_NAME='debian-installer-ubuntu20' ;;
       esac
    - curl -L https://git.grammatech.com/rewriting/gtirb/-/jobs/artifacts/${GTIRB_BRANCH}/download?job=${JOB_NAME} --output "gtirb.zip"
    - curl -L https://git.grammatech.com/rewriting/gtirb-pprinter/-/jobs/artifacts/${GTIRB_PPRINTER_BRANCH}/download?job=${JOB_NAME} --output "gtirb-pprinter.zip"
    - curl -L https://git.grammatech.com/rewriting/extra-packages/-/jobs/artifacts/${CAPSTONE_BRANCH}/download?job=capstone-linux-deb --output "capstone.zip"
    - for pkg in gtirb gtirb-pprinter capstone; do unzip $pkg.zip; done
    # Install gtirb, pprinter, and capstone
    - dpkg -i libcapstone-dev.deb libgtirb.deb libgtirb-dev.deb libgtirb-pprinter.deb libgtirb-pprinter-dev.deb
    # Build ddisasm
    - mkdir build
    - cd build
    # FIXME: CMake should automatically find LIEF_LIBRARY but fails to on Arch.
    - 'LIEF_LIBRARY=/usr/lib/libLIEF.a && [ -f $LIEF_LIBRARY ] || LIEF_LIBRARY=/usr/lib/libLIEF.so'
    - cmake -DCMAKE_CXX_COMPILER=${CXX_COMPILER} -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCPACK_DEBIAN_PACKAGE_RELEASE="$(lsb_release -sc)" -DBUILD_FUNINFER=1 -DLIEF_ROOT=/usr/ -DLIEF_LIBRARY=${LIEF_LIBRARY} -DDDISASM_STRIP_DEBUG_SYMBOLS=On ..
    - make -j4

.test-and-tag-template: &test-and-tag
  script:
    - case $OS in
       ubuntu18) JOB_NAME='debian-installer-ubuntu18' ;;
       ubuntu20) JOB_NAME='debian-installer-ubuntu20' ;;
       esac
    # Acquire gtirb artifacts
    - curl -L https://git.grammatech.com/rewriting/gtirb/-/jobs/artifacts/${GTIRB_BRANCH}/download?job=${JOB_NAME} --output "gtirb.zip"
    - curl -L https://git.grammatech.com/rewriting/gtirb-pprinter/-/jobs/artifacts/${GTIRB_PPRINTER_BRANCH}/download?job=${JOB_NAME} --output "gtirb-pprinter.zip"
    - curl -L https://git.grammatech.com/rewriting/extra-packages/-/jobs/artifacts/${CAPSTONE_BRANCH}/download?job=capstone-linux-deb --output "capstone.zip"
    - for pkg in gtirb gtirb-pprinter capstone; do unzip $pkg.zip; done
    # Install gtirb, pprinter and capstone
    - dpkg -i libcapstone-dev.deb libgtirb.deb libgtirb-pprinter.deb gtirb-pprinter.deb
    # Install gtirb python API
    - python3 -m pip install pip --upgrade && python3 -m pip install gtirb --extra-index-url=$EXTRA_INDEX_URL --pre
    # Run tests
    - cd build && PATH=$(pwd)/bin:$PATH ctest -V

build-ubuntu18-gcc:
  stage: build
  image: $DOCKER_REGISTRY/rewriting/ddisasm/ubuntu18:$IMAGE_TAG
  variables:
    OS: 'ubuntu18'
    CXX_COMPILER: 'g++-7'
    BUILD_TYPE: 'RelWithDebInfo'
  <<: *build

build-ubuntu20-gcc:
  stage: build
  image: $DOCKER_REGISTRY/rewriting/ddisasm/ubuntu20:$IMAGE_TAG
  variables:
    OS: 'ubuntu20'
    CXX_COMPILER: 'g++'
    BUILD_TYPE: 'RelWithDebInfo'
  rules:
    *run-only-main
  <<: *build

build-ubuntu20-gcc-debug:
  stage: build
  image: $DOCKER_REGISTRY/rewriting/ddisasm/ubuntu20:$IMAGE_TAG
  variables:
    OS: 'ubuntu20'
    CXX_COMPILER: 'g++'
    BUILD_TYPE: 'Debug'
  rules:
    *run-only-main
  <<: *build

build-ubuntu20-clang-debug:
  stage: build
  image: $DOCKER_REGISTRY/rewriting/ddisasm/ubuntu20:$IMAGE_TAG
  variables:
    OS: 'ubuntu20'
    CXX_COMPILER: 'clang++'
    BUILD_TYPE: 'Debug'
  <<: *build

build-static:
  stage: build
  image: $DOCKER_REGISTRY/rewriting/ddisasm/static:$IMAGE_TAG
  rules:
    *run-only-main
  script:
    # install capstone
    - curl -L https://git.grammatech.com/rewriting/extra-packages/-/jobs/artifacts/${CAPSTONE_BRANCH}/download?job=capstone-linux-deb --output "capstone.zip"
    - unzip capstone.zip
    - dpkg -i libcapstone-dev.deb
    # build GTIRB
    - git clone https://git.grammatech.com/rewriting/gtirb.git
    - mkdir gtirb/build
    - cd gtirb/build
    - cmake ../ -DCMAKE_BUILD_TYPE=RelWithDebInfo -DGTIRB_BUILD_SHARED_LIBS=OFF
    - make -j
    - cd python; python3 setup.py develop; cd ..
    - cd ../..
    # build gtirb-pprinter
    - git clone https://git.grammatech.com/rewriting/gtirb-pprinter.git -b $GTIRB_PPRINTER_BRANCH
    - mkdir gtirb-pprinter/build
    - cd gtirb-pprinter/build
    - cmake ../ -DCMAKE_BUILD_TYPE=RelWithDebInfo -DGTIRB_PPRINTER_BUILD_SHARED_LIBS=OFF
    - make -j
    - cd ../..
    # build ddisasm
    - mkdir build
    - cd build
    - cmake ../ -DCMAKE_BUILD_TYPE=RelWithDebInfo -DDDISASM_BUILD_SHARED_LIBS=OFF -DLIEF_ROOT=/usr/
    - make -j
    # Run the regression tests.
    - PATH=$(pwd)/../gtirb-pprinter/build/bin:$(pwd)/bin:$PATH ctest -V


# The jobs with name "pages" gets uploaded to gitlab pages.
# We only run this job in the default branch.
pages:
  image: $DOCKER_REGISTRY/rewriting/ddisasm/ubuntu20:$IMAGE_TAG
  stage: build
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - public
  script:
    - python3  doc/build_index.py
    - python3 -m sphinx  doc public

# We want to generate documentation for
# releases but not publish it in gitlab directly.
pages-no-publish:
  image: $DOCKER_REGISTRY/rewriting/ddisasm/ubuntu20:$IMAGE_TAG
  stage: build
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /^release-.*/'
    - if: $CI_MERGE_REQUEST_EVENT_TYPE == "merge_train"
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - public
  script:
    - python3  doc/build_index.py
    - python3 -m sphinx  doc public

static-drivers:
  stage: deploy
  image: $DOCKER_REGISTRY/rewriting/ddisasm/static:$IMAGE_TAG
  needs: [check-format]
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - build/bin
  rules:
    *run-only-main
  script:
    # install capstone
    - curl -L https://git.grammatech.com/rewriting/extra-packages/-/jobs/artifacts/${CAPSTONE_BRANCH}/download?job=capstone-linux-deb --output "capstone.zip"
    - unzip capstone.zip
    - dpkg -i libcapstone-dev.deb
    # build GTIRB
    - git clone https://git.grammatech.com/rewriting/gtirb.git
    - cd gtirb
    - mkdir build && cd build
    - cmake ../ -DCMAKE_BUILD_TYPE=Debug -DGTIRB_BUILD_SHARED_LIBS=OFF
    - make -j
    - cd python; python3 setup.py develop; cd ..
    - cd ../..
    # build gtirb-pprinter
    - git clone https://git.grammatech.com/rewriting/gtirb-pprinter.git -b $GTIRB_PPRINTER_BRANCH
    - cd gtirb-pprinter
    - mkdir build && cd build
    - cmake ../ -DCMAKE_BUILD_TYPE=Debug -DGTIRB_PPRINTER_BUILD_SHARED_LIBS=OFF
    - make -j
    - cd ../..
    # build ddisasm
    - mkdir build && cd build
    - cmake ../ -DCMAKE_BUILD_TYPE=Debug -DDDISASM_STATIC_DRIVERS=ON -DLIEF_ROOT=/usr/
    - make -j
    # Run the regression tests.
    - PATH=$(pwd)/../gtirb-pprinter/build/bin:$(pwd)/bin:$PATH ctest -V
    # For verification purposes, print ldd of the driver here.
    - ldd bin/ddisasm

run-ubuntu18-gcc:
  stage: test-and-tag
  image: $DOCKER_REGISTRY/rewriting/ddisasm/ubuntu18:$IMAGE_TAG
  needs: ['build-ubuntu18-gcc']
  variables:
    OS: 'ubuntu18'
    BUILD_TYPE: 'RelWithDebInfo'
  <<: *test-and-tag

run-ubuntu20-gcc:
  stage: test-and-tag
  image: $DOCKER_REGISTRY/rewriting/ddisasm/ubuntu20:$IMAGE_TAG
  needs: ['build-ubuntu20-gcc']
  variables:
    OS: 'ubuntu20'
    BUILD_TYPE: 'RelWithDebInfo'
  rules:
    *run-only-main
  <<: *test-and-tag

run-ubuntu20-gcc-debug:
  stage: test-and-tag
  image: $DOCKER_REGISTRY/rewriting/ddisasm/ubuntu20:$IMAGE_TAG
  needs: ['build-ubuntu20-gcc-debug']
  variables:
    OS: 'ubuntu20'
    BUILD_TYPE: 'Debug'
  rules:
    *run-only-main
  <<: *test-and-tag

run-ubuntu20-clang-debug:
  stage: test-and-tag
  image: $DOCKER_REGISTRY/rewriting/ddisasm/ubuntu20:$IMAGE_TAG
  needs: ['build-ubuntu20-clang-debug']
  variables:
    OS: 'ubuntu20'
    BUILD_TYPE: 'Debug'
  script:
  <<: *test-and-tag

test-make-install:
  stage: test-and-tag
  image: $DOCKER_REGISTRY/rewriting/ddisasm/ubuntu20:$IMAGE_TAG
  needs: ['build-ubuntu20-gcc']
  variables:
    OS: 'ubuntu20'
    COMPILER: 'gcc'
    BUILD_TYPE: 'RelWithDebInfo'
  rules:
    *run-only-main
  script:
    - curl -L https://git.grammatech.com/rewriting/gtirb/-/jobs/artifacts/${GTIRB_BRANCH}/download?job=debian-installer-ubuntu20 --output "gtirb.zip"
    - curl -L https://git.grammatech.com/rewriting/gtirb-pprinter/-/jobs/artifacts/${GTIRB_PPRINTER_BRANCH}/download?job=debian-installer-ubuntu20 --output "gtirb-pprinter.zip"
    - curl -L https://git.grammatech.com/rewriting/extra-packages/-/jobs/artifacts/${CAPSTONE_BRANCH}/download?job=capstone-linux-deb --output "capstone.zip"
    - for pkg in gtirb gtirb-pprinter capstone; do unzip $pkg.zip; done
    # Install gtirb, pprinter, and capstone
    - dpkg -i libcapstone-dev.deb libgtirb.deb libgtirb-dev.deb libgtirb-pprinter.deb libgtirb-pprinter-dev.deb
    # Install gtirb python API
    - python3 -m pip install pip --upgrade && python3 -m pip install gtirb --extra-index-url=$EXTRA_INDEX_URL --pre
    - cd build && make -t && make install
    - cd .. && PYTHONPATH=$PYTHONPATH:$(pwd)/tests python3 -m unittest end2end_test.TestExamples.test_1

# APT packaging related jobs
.build-ubuntu-packages-template: &build-ubuntu-packages
  stage: build-packages
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - build/_CPack_Packages/
      - build/bin/*.debug
      - build/*.deb
      - build/install_manifest*.txt
  script:
    - curl -L https://git.grammatech.com/rewriting/extra-packages/-/jobs/artifacts/${CAPSTONE_BRANCH}/download?job=capstone-linux-deb --output "capstone.zip"
    - curl -L https://git.grammatech.com/rewriting/gtirb/-/jobs/artifacts/${GTIRB_BRANCH}/download?job=debian-installer-$OS --output "gtirb.zip"
    - curl -L https://git.grammatech.com/rewriting/gtirb-pprinter/-/jobs/artifacts/${GTIRB_PPRINTER_BRANCH}/download?job=debian-installer-$OS --output "gtirb-pprinter.zip"
    - for pkg in gtirb gtirb-pprinter capstone; do unzip $pkg.zip; done
    - dpkg -i libcapstone-dev.deb libgtirb.deb libgtirb-dev.deb libgtirb-pprinter.deb libgtirb-pprinter-dev.deb
    - 'CAPSTONE_PKG_VERSION=$(dpkg -f libcapstone-dev.deb version | sed -E "s/[[:digit:]]+://g")'
    - cd build
    # Use make to update timestamps on all build targets. The artifacts we
    # pulled in from the dependent job should already be up-to-date, but since
    # this job checked out a new copy of the source, its timestamps are newer.
    - make -t
    - CPACK_DDISASM_STABLE_PKG_NAME=OFF
    - '[[ ! $CI_COMMIT_REF_NAME =~ ^release-.* ]] || CPACK_DDISASM_STABLE_PKG_NAME=ON'
    - cpack -G "DEB" -D CPACK_DDISASM_STABLE_PKG_NAME=$CPACK_DDISASM_STABLE_PKG_NAME -D CPACK_CAPSTONE_PKG_VERSION=$CAPSTONE_PKG_VERSION -D CPACK_DDISASM_PACKAGE=deb-ddisasm
    - cpack -G "DEB" -D CPACK_DDISASM_STABLE_PKG_NAME=$CPACK_DDISASM_STABLE_PKG_NAME -D CPACK_CAPSTONE_PKG_VERSION=$CAPSTONE_PKG_VERSION -D CPACK_DDISASM_PACKAGE=deb-debug

build-ubuntu18-packages:
  image: $DOCKER_REGISTRY/rewriting/ddisasm/ubuntu18:$IMAGE_TAG
  needs: ['build-ubuntu18-gcc']
  variables:
    OS: ubuntu18
  <<: *build-ubuntu-packages

build-ubuntu20-packages:
  image: $DOCKER_REGISTRY/rewriting/ddisasm/ubuntu20:$IMAGE_TAG
  needs: ['build-ubuntu20-gcc']
  variables:
    OS: ubuntu20
  rules:
    *run-only-main
  <<: *build-ubuntu-packages

.setup-apt-repo-template: &setup-apt-repo
  stage: setup-package-tests
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - apt-repo
  rules:
    *run-only-main
  script:
    - curl -L https://git.grammatech.com/rewriting/extra-packages/-/jobs/artifacts/${CAPSTONE_BRANCH}/download?job=capstone-linux-deb --output "capstone.zip"
    - curl -L https://git.grammatech.com/rewriting/gtirb/-/jobs/artifacts/${GTIRB_BRANCH}/download?job=debian-installer-$OS --output "gtirb.zip"
    - curl -L https://git.grammatech.com/rewriting/gtirb-pprinter/-/jobs/artifacts/${GTIRB_PPRINTER_BRANCH}/download?job=debian-installer-$OS --output "gtirb-pprinter.zip"
    - for pkg in gtirb gtirb-pprinter capstone; do unzip $pkg.zip; done
    - mkdir apt-repo
    - cp build/*.deb apt-repo
    - cp *.deb apt-repo
    - cd apt-repo && dpkg-scanpackages . /dev/null > Packages

setup-ubuntu18-package-tests:
  image: $DOCKER_REGISTRY/rewriting/ddisasm/ubuntu18:$IMAGE_TAG
  needs: ['build-ubuntu18-packages']
  variables:
    OS: ubuntu18
  <<: *setup-apt-repo

setup-ubuntu20-package-tests:
  image: $DOCKER_REGISTRY/rewriting/ddisasm/ubuntu20:$IMAGE_TAG
  needs: ['build-ubuntu20-packages']
  variables:
    OS: ubuntu20
  <<: *setup-apt-repo

.test-ubuntu-ddisasm: &test-ubuntu-ddisasm
  stage: package-tests
  rules:
    *run-only-main
  script:
    - if [ $(lsb_release -sc) == "bionic" ]; then TRUSTED="[trusted=yes]"; fi
    - if [ $(lsb_release -sc) == "focal" ]; then TRUSTED="[trusted=yes]"; fi
    - echo -e "\ndeb $TRUSTED file:$(pwd)/apt-repo ./\n" >> /etc/apt/sources.list
    - 'TEST_PKG_NAME=$(dpkg --info apt-repo/ddisasm.deb | sed -n "s/ Package: //p")'
    - apt-get update -y && apt-get install -y --allow-unauthenticated $TEST_PKG_NAME
    - ddisasm --version


.test-ubuntu-ddisasm-dbg: &test-ubuntu-ddisasm-dbg
  stage: package-tests
  rules:
    *run-only-main
  script:
    - if [ $(lsb_release -sc) == "bionic" ]; then TRUSTED="[trusted=yes]"; fi
    - if [ $(lsb_release -sc) == "focal" ]; then TRUSTED="[trusted=yes]"; fi
    - echo -e "\ndeb $TRUSTED file:$(pwd)/apt-repo ./\n" >> /etc/apt/sources.list
    - 'TEST_PKG_NAME=$(dpkg --info apt-repo/ddisasm-dbg.deb | sed -n "s/ Package: //p")'
    - apt-get update -y && apt-get install -y --allow-unauthenticated $TEST_PKG_NAME
    - '[ -f /usr/lib/debug/.build-id/$(readelf -n /usr/bin/ddisasm | grep ''Build ID: '' | cut -d'':'' -f2 | sed -E ''s/ ([a-f0-9]{2,})([a-f0-9]{30,})/\1\/\2/g'').debug ]'

test-ubuntu18-ddisasm-package:
  image: $DOCKER_REGISTRY/rewriting/ddisasm/ubuntu18:$IMAGE_TAG
  needs: ['setup-ubuntu18-package-tests']
  <<: *test-ubuntu-ddisasm

test-ubuntu20-ddisasm-package:
  image: $DOCKER_REGISTRY/rewriting/ddisasm/ubuntu20:$IMAGE_TAG
  needs: ['setup-ubuntu20-package-tests']
  <<: *test-ubuntu-ddisasm

test-ubuntu18-ddisasm-dbg-package:
  image: $DOCKER_REGISTRY/rewriting/ddisasm/ubuntu18:$IMAGE_TAG
  needs: ['setup-ubuntu18-package-tests']
  <<: *test-ubuntu-ddisasm-dbg

test-ubuntu20-ddisasm-dbg-package:
  image: $DOCKER_REGISTRY/rewriting/ddisasm/ubuntu20:$IMAGE_TAG
  needs: ['setup-ubuntu20-package-tests']
  <<: *test-ubuntu-ddisasm-dbg

.debian-installer-ubuntu-template: &debian-installer-ubuntu-template
  stage: deploy
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - '*ddisasm*.deb'
  rules:
    *run-only-main
  script:
    - cp build/*ddisasm*.deb ./

debian-installer-ubuntu18:
  image: $DOCKER_REGISTRY/rewriting/ddisasm/ubuntu18:$IMAGE_TAG
  needs:
    - 'test-ubuntu18-ddisasm-package'
    - 'test-ubuntu18-ddisasm-dbg-package'
    - 'build-ubuntu18-packages'
  <<: *debian-installer-ubuntu-template

debian-installer-ubuntu20:
  image: $DOCKER_REGISTRY/rewriting/ddisasm/ubuntu20:$IMAGE_TAG
  needs:
    - 'test-ubuntu20-ddisasm-package'
    - 'test-ubuntu20-ddisasm-dbg-package'
    - 'build-ubuntu20-packages'
  <<: *debian-installer-ubuntu-template

.get-image-name: &get-image-name
  - VERSION=$(echo $(cat version.txt) | python3 -c "import sys; l=sys.stdin.read().split(); print('.'.join([l[1],l[3],l[5]]))")
  - 'IMAGE_NAME=grammatech/ddisasm'

docker-image:
  stage: deploy
  needs: []
  tags: ['research-shell']
  rules:
    - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH'
    - if: '$CI_COMMIT_REF_NAME =~ /^release-.*/'
  script:
    - *get-image-name
    - docker build -t $IMAGE_NAME:latest --build-arg DDISASM_URL=$CI_PROJECT_URL --build-arg DDISASM_BRANCH=$CI_COMMIT_REF_NAME .
    - docker tag $IMAGE_NAME:latest $IMAGE_NAME:$VERSION
    - docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD
    - docker push $IMAGE_NAME:latest
    - docker push $IMAGE_NAME:$VERSION
  after_script:
    - *get-image-name
    - docker rmi $IMAGE_NAME:latest
    - docker rmi $IMAGE_NAME:$VERSION

.apt-upload: &apt-upload
  stage: deploy-to-apt
  trigger:
    project: rewriting/utility/package-uploader
    strategy: depend

public-bionic-unstable:
  <<: *apt-upload
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
  variables:
    JOB_NAME: debian-installer-ubuntu18
    APT_REPO: public
    APT_REPO_CODENAME: bionic
    APT_REPO_COMPONENT: unstable

internal-bionic-unstable:
  <<: *apt-upload
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
  variables:
    JOB_NAME: debian-installer-ubuntu18
    APT_REPO: internal
    APT_REPO_CODENAME: bionic
    APT_REPO_COMPONENT: unstable

public-focal-unstable:
  <<: *apt-upload
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
  variables:
    JOB_NAME: debian-installer-ubuntu20
    APT_REPO: public
    APT_REPO_CODENAME: focal
    APT_REPO_COMPONENT: unstable

internal-focal-unstable:
  <<: *apt-upload
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
  variables:
    JOB_NAME: debian-installer-ubuntu20
    APT_REPO: internal
    APT_REPO_CODENAME: focal
    APT_REPO_COMPONENT: unstable

public-bionic-stable:
  <<: *apt-upload
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /^release-.*/'
  variables:
    JOB_NAME: debian-installer-ubuntu18
    APT_REPO: public
    APT_REPO_CODENAME: bionic
    APT_REPO_COMPONENT: stable

internal-bionic-stable:
  <<: *apt-upload
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /^release-.*/'
  variables:
    JOB_NAME: debian-installer-ubuntu18
    APT_REPO: internal
    APT_REPO_CODENAME: bionic
    APT_REPO_COMPONENT: stable

public-focal-stable:
  <<: *apt-upload
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /^release-.*/'
  variables:
    JOB_NAME: debian-installer-ubuntu20
    APT_REPO: public
    APT_REPO_CODENAME: focal
    APT_REPO_COMPONENT: stable

internal-focal-stable:
  <<: *apt-upload
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /^release-.*/'
  variables:
    JOB_NAME: debian-installer-ubuntu20
    APT_REPO: internal
    APT_REPO_CODENAME: focal
    APT_REPO_COMPONENT: stable
