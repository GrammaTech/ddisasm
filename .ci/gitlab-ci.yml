variables:
  GTIRB_VERSION: "1.10.9"
  GTIRB_PPRINTER_VERSION: "1.8.6"
  CAPSTONE_VERSION: "5.0.0-gt2"
  # The IMAGE_TAG is derived from the branch name so that if a branch modifies
  # the CI images, it builds and runs using the new images without conflicting
  # with main.
  IMAGE_TAG: "$CI_COMMIT_REF_SLUG"
  EXTRA_INDEX_URL: https://__token__:$GL_PKG_API_TOKEN@${CI_SERVER_HOST}/api/v4/projects/1587/packages/pypi/simple
  CONAN_PASSWORD: $CI_JOB_TOKEN
  # The following two variables are used by the package-uploader
  PROJECT_ID: $CI_PROJECT_ID
  PIPELINE_ID: $CI_PIPELINE_ID

workflow:
  rules:
    # merge_train CI happens once per branch, right before merging
    # they must pass in order for the merge to go through
    - if: $CI_MERGE_REQUEST_EVENT_TYPE == "merge_train"
    # If no 'rules' are explicitly set for jobs below, they will automatically
    # run each time this pipeline runs (merge, commits, or schedules)
    - if: $CI_COMMIT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "schedule"

include:
  - local: .ci/arm-benchmark.yml

stages:
  - build-images
  - prebuild
  - build
  - build-packages
  - test-and-tag
  - setup-package-tests
  - package-tests
  - deploy
  - deploy-to-apt
  - trigger
  - results
  - upload

default:
  tags: [shared]

.setup-apt:
  # Configure GTIRB APT repository.
  - DIST_NAME="$(lsb_release -sc)"
  - wget -O - https://download.grammatech.com/gtirb/files/apt-repo/conf/apt.gpg.key | apt-key add -
  - COMPONENT=$([[ $CI_COMMIT_REF_NAME =~ release-.* ]] && echo "stable" || echo "unstable")
  - echo "deb https://download.grammatech.com/gtirb/files/apt-repo $DIST_NAME $COMPONENT" | tee -a /etc/apt/sources.list.d/gtirb.list
  - apt-get update -y

.download-deps:
  - >-
    apt-get install --download-only -y
    libcapstone-dev${CAPSTONE_VERSION:+-$CAPSTONE_VERSION}
    libgtirb-dev${GTIRB_VERSION:+-$GTIRB_VERSION}
    libgtirb-pprinter-dev${GTIRB_PPRINTER_VERSION:+-$GTIRB_PPRINTER_VERSION}
    gtirb-pprinter${GTIRB_PPRINTER_VERSION:+-$GTIRB_PPRINTER_VERSION}
  - mv /var/cache/apt/archives/*.deb .

.install-deps:
  - >-
    apt-get install -y
    libcapstone-dev${CAPSTONE_VERSION:+-$CAPSTONE_VERSION}
    libgtirb-dev${GTIRB_VERSION:+-$GTIRB_VERSION}
    libgtirb-pprinter-dev${GTIRB_PPRINTER_VERSION:+-$GTIRB_PPRINTER_VERSION}
    gtirb-pprinter${GTIRB_PPRINTER_VERSION:+-$GTIRB_PPRINTER_VERSION}

.install-capstone:
  - apt-get install -y libcapstone-dev${CAPSTONE_VERSION:+-$CAPSTONE_VERSION}

.build-ci-image: &build-ci-image
  stage: build-images
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    # Configure authentication credentials for GitLab
    - >-
      echo "{\"auths\":{
        \"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"},
        \"https://index.docker.io/v1/\":{\"username\":\"$DOCKERHUB_USERNAME\",\"password\":\"$DOCKERHUB_PASSWORD\"}
      }}" > /kaniko/.docker/config.json
    # Run the kaniko executor, which will build our image (using a cache if available)
    # Push to our internal registry
    # If we're on the main branch, also push the latest tag.
    - >-
      if [ "$CI_COMMIT_BRANCH" = "$CI_DEFAULT_BRANCH" ]; then
        export EXTRA_DEST="--destination=${DOCKER_REGISTRY}/${CI_PROJECT_PATH}/${IMAGE_NAME}:latest"
      fi
    - >-
      /kaniko/executor
      --snapshotMode=redo
      --cache=true
      --cache-repo=${DOCKER_REGISTRY}/${CI_PROJECT_PATH}/${IMAGE_NAME}/cache
      --context=$CI_PROJECT_DIR
      --dockerfile=$CI_PROJECT_DIR/$DOCKERFILE_PATH
      --destination=${DOCKER_REGISTRY}/${CI_PROJECT_PATH}/${IMAGE_NAME}:$IMAGE_TAG
      $EXTRA_DEST

build-ci-image-conan-ubuntu20:
  <<: *build-ci-image
  variables:
    DOCKERFILE_PATH: .ci/Dockerfile.conan-ubuntu20
    IMAGE_NAME: conan-ubuntu20
    UBUNTU_CODENAME: focal

build-ci-image-ubuntu20:
  <<: *build-ci-image
  variables:
    DOCKERFILE_PATH: .ci/Dockerfile.ubuntu20
    IMAGE_NAME: ubuntu20
    UBUNTU_CODENAME: focal

build-ci-image-static:
  <<: *build-ci-image
  variables:
    DOCKERFILE_PATH: .ci/Dockerfile.static
    IMAGE_NAME: static
    UBUNTU_CODENAME: "" # Don't push to DockerHub

check-format:
  stage: prebuild
  image: $DOCKER_REGISTRY/rewriting/ddisasm/ubuntu20:$IMAGE_TAG
  script:
    - pre-commit run --all-files --show-diff-on-failure

.run_only_main: &run-only-main
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  - if: '$CI_COMMIT_REF_NAME =~ /^release-.*/'
  - if: $CI_MERGE_REQUEST_EVENT_TYPE == "merge_train"
  # regular build is manual and optional
  # This only works with gitlab 13.12 or higher
  - if: $CI_COMMIT_BRANCH
    when: manual
    allow_failure: true

.publish-rules: &publish-rules
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  - if: '$CI_COMMIT_REF_NAME =~ /^release-.*/'
  # regular build is manual and optional
  # This only works with gitlab 13.12 or higher
  - if: $CI_COMMIT_BRANCH
    when: manual
    allow_failure: true

.conan-linux-publish-template: &conan-linux-publish-template
  image: $DOCKER_REGISTRY/rewriting/ddisasm/conan-ubuntu20:$IMAGE_TAG
  stage: deploy
  rules:
    *publish-rules
  script:
    - export CONAN_USER_HOME=$(pwd)
    - pip3 install --upgrade conan
    - PYTHONPATH="$(pwd):$PYTHONPATH" python3 .ci/run_conan.py upload

.conan-linux-build-template: &conan-linux-build-template
  stage: build
  needs: [check-format]
  artifacts:
    paths:
      - .conan
    # Set a short expiry time - only needed until it is published by a later job.
    expire_in: 8 hours
  rules:
    *run-only-main
  script:
    - export CONAN_USER_HOME=$(pwd)
    - pip3 install --upgrade conan
    - conan profile new default --detect
    - conan profile update settings.compiler.libcxx=libstdc++11 default
    - conan remote add gitlab ${CI_API_V4_URL}/packages/conan
    - conan user ci_user -r gitlab -p
    # Install gtirb python wheel
    - python3 -m pip install pip --upgrade && python3 -m pip install gtirb --extra-index-url=$EXTRA_INDEX_URL --pre
    # Run build script
    - PYTHONPATH="$(pwd):$PYTHONPATH" python3 .ci/run_conan.py build -s build_type=Release

build-conan-gcc9-release:
  image: $DOCKER_REGISTRY/rewriting/ddisasm/conan-ubuntu20:$IMAGE_TAG
  <<: *conan-linux-build-template

conan-gcc9-release-publish:
  needs:
    - build-conan-gcc9-release
  dependencies: [build-conan-gcc9-release]
  <<: *conan-linux-publish-template

.conan-windows-template: &conan-windows-template
  stage: build
  tags: [ddisasm-windows]
  artifacts:
    paths:
      - .conan
    # Set a short expiry time - only needed until it is published by a later job.
    expire_in: 8 hours
  script:
    - systeminfo
    - pip3 install --upgrade conan
    # Build conan packages in a directory that we can publish as an artifact.
    - export CONAN_USER_HOME=$(cygpath -w $(pwd))
    # Set up user and remote
    - conan remote add gitlab ${CI_API_V4_URL}/packages/conan
    - conan user ci_user -r gitlab -p
    # Install packages needed for the tests
    - python -m pip install pip --upgrade && python -m pip install gtirb --extra-index-url=$EXTRA_INDEX_URL --pre
    # Run build script
    - export PYTHONPATH="$PYTHONPATH;$(cygpath -w $(pwd))"
    - python .ci/run_conan.py build -s build_type=$BUILD_TYPE

.conan-windows-publish-template: &conan-windows-publish-template
  stage: deploy
  tags: [ddisasm-windows]
  rules:
    *publish-rules
  script:
    - export CONAN_USER_HOME=$(cygpath -w $(pwd))
    - pip3 install --upgrade conan
    - export PYTHONPATH="$PYTHONPATH;$(cygpath -w $(pwd))"
    - python .ci/run_conan.py upload

.conan-windows-package-template: &conan-windows-package-template
  stage: build-packages
  tags: [ddisasm-windows]
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - ddisasm*.zip
  script:
    # Initialize
      # Setting CI_PROJECT_DIR to the PWD because GitLab Runner sets a relative path for CI_PROJECT_DIR with VirtualBox runners.
    - export CI_PROJECT_DIR=`cygpath -w $(pwd)`
    - export CONAN_USER_HOME="${CI_PROJECT_DIR}"
    - export PYTHONPATH="${PYTHONPATH};${CI_PROJECT_DIR}"
    # Prep
    - python -m pip install --upgrade conan
    # Install
    - python .ci/run_conan.py install --install-folder=./packages
    # Package
    - export PKG_NAME=`conan inspect . --raw name`
    - export PKG_VERSION=`conan inspect . --raw version`
    - export PKG_ARCH=`uname -m`
    - export PKG_FILENAME="${CI_PROJECT_DIR}\\${PKG_NAME}-${PKG_VERSION}.win10.${PKG_ARCH}.zip"
    - export PKG_FILENAME_LITE="${CI_PROJECT_DIR}\\${PKG_NAME}-lite-${PKG_VERSION}.win10.${PKG_ARCH}.zip"
    - |+
      for PKG_DIR in ./packages/*/; do
        PKG_DIR_NAME=`basename $PKG_DIR`
        for PKG_SUBDIR in ./packages/$PKG_DIR_NAME/*/; do
          PKG_SUBDIR_NAME=`basename $PKG_SUBDIR`
          PKG_FILE_DEST="./package/${PKG_NAME}/${PKG_SUBDIR_NAME}"
          [ -d $PKG_FILE_DEST ] || mkdir -p $PKG_FILE_DEST
          if [ $PKG_SUBDIR_NAME != 'licenses' ]; then
            cp -r $PKG_SUBDIR/* $PKG_FILE_DEST
          else
            for PKG_LICENSE in $PKG_SUBDIR/*; do
              cp $PKG_LICENSE $PKG_FILE_DEST/LICENSE-$PKG_DIR_NAME
            done
          fi
        done
      done
    - cd ./package
    - zip -r $PKG_FILENAME ./
    - zip -r $PKG_FILENAME_LITE ./ -x "${PKG_NAME}/include/*"

conan-windows-debug:
  variables:
    BUILD_TYPE: Debug
  rules:
    *run-only-main
  <<: *conan-windows-template

conan-windows-debug-publish:
  needs:
    - conan-windows-debug
  variables:
    BUILD_TYPE: Debug
  dependencies: [conan-windows-debug]
  <<: *conan-windows-publish-template

conan-windows-release:
  variables:
    BUILD_TYPE: Release
  <<: *conan-windows-template

conan-windows-release-publish:
  needs:
    - conan-windows-release
  variables:
    BUILD_TYPE: Release
  dependencies: [conan-windows-release]
  <<: *conan-windows-publish-template

conan-windows-release-package:
  needs: [conan-windows-release]
  <<: *conan-windows-package-template

.build-template: &build
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - build
  script:
    - !reference [.setup-apt]
    - !reference [.install-deps]
    # Build ddisasm
    - mkdir build
    - cd build
    - cmake -DCMAKE_CXX_COMPILER=${CXX_COMPILER} -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCPACK_DEBIAN_PACKAGE_RELEASE="$(lsb_release -sc)" -DBUILD_FUNINFER=1 -DDDISASM_STRIP_DEBUG_SYMBOLS=ON ..
    - make

.test-and-tag-template: &test-and-tag
  script:
    - !reference [.setup-apt]
    - !reference [.install-deps]
    # Install gtirb python API
    - python3 -m pip install pip --upgrade && python3 -m pip install gtirb --extra-index-url=$EXTRA_INDEX_URL --pre
    # Run tests
    - cd build && PATH=$(pwd)/bin:$PATH ctest -V

build-ubuntu20-gcc:
  stage: build
  image: $DOCKER_REGISTRY/rewriting/ddisasm/ubuntu20:$IMAGE_TAG
  variables:
    OS: 'ubuntu20'
    CXX_COMPILER: 'g++'
    BUILD_TYPE: 'RelWithDebInfo'
  <<: *build

build-ubuntu20-gcc-debug:
  stage: build
  image: $DOCKER_REGISTRY/rewriting/ddisasm/ubuntu20:$IMAGE_TAG
  variables:
    OS: 'ubuntu20'
    CXX_COMPILER: 'g++'
    BUILD_TYPE: 'Debug'
  rules:
    *run-only-main
  <<: *build

build-ubuntu20-clang-debug:
  stage: build
  image: $DOCKER_REGISTRY/rewriting/ddisasm/ubuntu20:$IMAGE_TAG
  variables:
    OS: 'ubuntu20'
    CXX_COMPILER: 'clang++'
    BUILD_TYPE: 'Debug'
  <<: *build

build-static:
  stage: build
  image: $DOCKER_REGISTRY/rewriting/ddisasm/static:$IMAGE_TAG
  rules:
    *run-only-main
  script:
    # install capstone
    - !reference [.setup-apt]
    - !reference [.install-capstone]
    # build GTIRB
    - GTIRB_BRANCH=$([[ $CI_COMMIT_REF_NAME =~ release-.* ]] && echo "release-$GTIRB_VERSION" || echo "master")
    - git clone https://git.grammatech.com/rewriting/gtirb.git -b $GTIRB_BRANCH
    - mkdir gtirb/build
    - cd gtirb/build
    - cmake ../ -DCMAKE_BUILD_TYPE=RelWithDebInfo -DGTIRB_BUILD_SHARED_LIBS=OFF
    - make -j
    - cd python; python3 setup.py develop; cd ..
    - cd ../..
    # build gtirb-pprinter
    - GTIRB_PPRINTER_BRANCH=$([[ $CI_COMMIT_REF_NAME =~ release-.* ]] && echo "release-$GTIRB_PPRINTER_VERSION" || echo "master")
    - git clone https://git.grammatech.com/rewriting/gtirb-pprinter.git -b $GTIRB_PPRINTER_BRANCH
    - mkdir gtirb-pprinter/build
    - cd gtirb-pprinter/build
    - cmake ../ -DCMAKE_BUILD_TYPE=RelWithDebInfo -DGTIRB_PPRINTER_BUILD_SHARED_LIBS=OFF
    - make -j
    - cd ../..
    # build ddisasm
    - mkdir build
    - cd build
    - cmake ../ -DCMAKE_BUILD_TYPE=RelWithDebInfo -DDDISASM_BUILD_SHARED_LIBS=OFF
    - make
    # Run the regression tests.
    - PATH=$(pwd)/../gtirb-pprinter/build/bin:$(pwd)/bin:$PATH ctest -V


# The jobs with name "pages" gets uploaded to gitlab pages.
# We only run this job in the default branch.
pages:
  image: $DOCKER_REGISTRY/rewriting/ddisasm/ubuntu20:$IMAGE_TAG
  stage: build
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - public
  script:
    - python3  doc/build_index.py
    - python3 -m sphinx  doc public

# We want to generate documentation for
# releases but not publish it in gitlab directly.
pages-no-publish:
  image: $DOCKER_REGISTRY/rewriting/ddisasm/ubuntu20:$IMAGE_TAG
  stage: build
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /^release-.*/'
    - if: $CI_MERGE_REQUEST_EVENT_TYPE == "merge_train"
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - public
  script:
    - python3  doc/build_index.py
    - python3 -m sphinx  doc public

static-drivers:
  stage: deploy
  image: $DOCKER_REGISTRY/rewriting/ddisasm/static:$IMAGE_TAG
  needs: [check-format]
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - build/bin
  rules:
    *run-only-main
  script:
    # install capstone
    - !reference [.setup-apt]
    - !reference [.install-capstone]
    # build GTIRB
    - GTIRB_BRANCH=$([[ $CI_COMMIT_REF_NAME =~ release-.* ]] && echo "release-$GTIRB_VERSION" || echo "master")
    - git clone https://git.grammatech.com/rewriting/gtirb.git -b $GTIRB_BRANCH
    - cd gtirb
    - mkdir build && cd build
    - cmake ../ -DCMAKE_BUILD_TYPE=Debug -DGTIRB_BUILD_SHARED_LIBS=OFF
    - make -j
    - cd python; python3 setup.py develop; cd ..
    - cd ../..
    # build gtirb-pprinter
    - GTIRB_PPRINTER_BRANCH=$([[ $CI_COMMIT_REF_NAME =~ release-.* ]] && echo "release-$GTIRB_PPRINTER_VERSION" || echo "master")
    - git clone https://git.grammatech.com/rewriting/gtirb-pprinter.git -b $GTIRB_PPRINTER_BRANCH
    - cd gtirb-pprinter
    - mkdir build && cd build
    - cmake ../ -DCMAKE_BUILD_TYPE=Debug -DGTIRB_PPRINTER_BUILD_SHARED_LIBS=OFF
    - make -j
    - cd ../..
    # build ddisasm
    - mkdir build && cd build
    - cmake ../ -DCMAKE_BUILD_TYPE=Debug -DDDISASM_STATIC_DRIVERS=ON
    - make
    # Run the regression tests.
    - PATH=$(pwd)/../gtirb-pprinter/build/bin:$(pwd)/bin:$PATH ctest -V
    # For verification purposes, print ldd of the driver here.
    - ldd bin/ddisasm

run-ubuntu20-gcc:
  stage: test-and-tag
  image: $DOCKER_REGISTRY/rewriting/ddisasm/ubuntu20:$IMAGE_TAG
  needs: ['build-ubuntu20-gcc']
  variables:
    OS: 'ubuntu20'
    BUILD_TYPE: 'RelWithDebInfo'
  rules:
    *run-only-main
  <<: *test-and-tag

run-ubuntu20-gcc-debug:
  stage: test-and-tag
  image: $DOCKER_REGISTRY/rewriting/ddisasm/ubuntu20:$IMAGE_TAG
  needs: ['build-ubuntu20-gcc-debug']
  variables:
    OS: 'ubuntu20'
    BUILD_TYPE: 'Debug'
  rules:
    *run-only-main
  <<: *test-and-tag

run-ubuntu20-clang-debug:
  stage: test-and-tag
  image: $DOCKER_REGISTRY/rewriting/ddisasm/ubuntu20:$IMAGE_TAG
  needs: ['build-ubuntu20-clang-debug']
  variables:
    OS: 'ubuntu20'
    BUILD_TYPE: 'Debug'
  script:
  <<: *test-and-tag

test-make-install:
  stage: test-and-tag
  image: $DOCKER_REGISTRY/rewriting/ddisasm/ubuntu20:$IMAGE_TAG
  needs: ['build-ubuntu20-gcc']
  variables:
    OS: 'ubuntu20'
    COMPILER: 'gcc'
    BUILD_TYPE: 'RelWithDebInfo'
  rules:
    *run-only-main
  script:
    - !reference [.setup-apt]
    - !reference [.install-deps]
    # Install gtirb python API
    - python3 -m pip install pip --upgrade && python3 -m pip install gtirb --extra-index-url=$EXTRA_INDEX_URL --pre
    - cd build && make -t && make install
    - cd .. && PYTHONPATH=$PYTHONPATH:$(pwd)/tests python3 -m unittest end2end_test.TestExamples.test_1

# APT packaging related jobs
.build-ubuntu-packages-template: &build-ubuntu-packages
  stage: build-packages
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - build/_CPack_Packages/
      - build/bin/*.debug
      - build/*.deb
      - build/install_manifest*.txt
  script:
    - !reference [.setup-apt]
    - !reference [.install-deps]
    - "CAPSTONE_PKG_VERSION=$(dpkg -s libcapstone-dev${CAPSTONE_VERSION:+-$CAPSTONE_VERSION} | awk '/Version:/ { print $2 }')"
    - cd build
    # Use make to update timestamps on all build targets. The artifacts we
    # pulled in from the dependent job should already be up-to-date, but since
    # this job checked out a new copy of the source, its timestamps are newer.
    - make -t
    - CPACK_DDISASM_STABLE_PKG_NAME=OFF
    - '[[ ! $CI_COMMIT_REF_NAME =~ ^release-.* ]] || CPACK_DDISASM_STABLE_PKG_NAME=ON'
    - cpack -G "DEB" -D CPACK_DDISASM_STABLE_PKG_NAME=$CPACK_DDISASM_STABLE_PKG_NAME -D CPACK_CAPSTONE_PKG_VERSION=$CAPSTONE_PKG_VERSION -D CPACK_DDISASM_PACKAGE=deb-ddisasm
    - cpack -G "DEB" -D CPACK_DDISASM_STABLE_PKG_NAME=$CPACK_DDISASM_STABLE_PKG_NAME -D CPACK_CAPSTONE_PKG_VERSION=$CAPSTONE_PKG_VERSION -D CPACK_DDISASM_PACKAGE=deb-debug

build-ubuntu20-packages:
  image: $DOCKER_REGISTRY/rewriting/ddisasm/ubuntu20:$IMAGE_TAG
  needs: ['build-ubuntu20-gcc']
  variables:
    OS: ubuntu20
  <<: *build-ubuntu-packages

.setup-apt-repo-template: &setup-apt-repo
  stage: setup-package-tests
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - apt-repo
  script:
    - !reference [.setup-apt]
    - !reference [.download-deps]
    - mkdir apt-repo
    - mv *.deb apt-repo
    - rm /etc/apt/sources.list.d/gtirb.list && apt-get update -y
    - cp build/*.deb apt-repo
    - cd apt-repo && dpkg-scanpackages . /dev/null > Packages

setup-ubuntu20-package-tests:
  image: $DOCKER_REGISTRY/rewriting/ddisasm/ubuntu20:$IMAGE_TAG
  needs: ['build-ubuntu20-packages']
  variables:
    OS: ubuntu20
  <<: *setup-apt-repo

.test-ubuntu-ddisasm: &test-ubuntu-ddisasm
  stage: package-tests
  script:
    - if [ $(lsb_release -sc) == "focal" ]; then TRUSTED="[trusted=yes]"; fi
    - echo -e "\ndeb $TRUSTED file:$(pwd)/apt-repo ./\n" >> /etc/apt/sources.list
    - 'TEST_PKG_NAME=$(dpkg --info apt-repo/ddisasm.deb | sed -n "s/ Package: //p")'
    - apt-get update -y && apt-get install -y --allow-unauthenticated $TEST_PKG_NAME
    - ddisasm --version

.test-ubuntu-ddisasm-dbg: &test-ubuntu-ddisasm-dbg
  stage: package-tests
  script:
    - if [ $(lsb_release -sc) == "focal" ]; then TRUSTED="[trusted=yes]"; fi
    - echo -e "\ndeb $TRUSTED file:$(pwd)/apt-repo ./\n" >> /etc/apt/sources.list
    - 'TEST_PKG_NAME=$(dpkg --info apt-repo/ddisasm-dbg.deb | sed -n "s/ Package: //p")'
    - apt-get update -y && apt-get install -y --allow-unauthenticated $TEST_PKG_NAME
    - '[ -f /usr/lib/debug/.build-id/$(readelf -n /usr/bin/ddisasm | grep ''Build ID: '' | cut -d'':'' -f2 | sed -E ''s/ ([a-f0-9]{2,})([a-f0-9]{30,})/\1\/\2/g'').debug ]'

test-ubuntu20-ddisasm-package:
  image: $DOCKER_REGISTRY/rewriting/ddisasm/ubuntu20:$IMAGE_TAG
  needs: ['setup-ubuntu20-package-tests']
  <<: *test-ubuntu-ddisasm

test-ubuntu20-ddisasm-dbg-package:
  image: $DOCKER_REGISTRY/rewriting/ddisasm/ubuntu20:$IMAGE_TAG
  needs: ['setup-ubuntu20-package-tests']
  <<: *test-ubuntu-ddisasm-dbg

.debian-installer-ubuntu-template: &debian-installer-ubuntu-template
  stage: deploy
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - '*ddisasm*.deb'
    reports:
      dotenv: .env
  script:
    - cp build/*ddisasm*.deb ./
    # exports e.g. JOB_ID_DEBIAN_INSTALLER_UBUNTU20=$CI_JOB_ID
    - echo "JOB_ID_$(echo $CI_JOB_NAME | tr - _ | tr '[:lower:]' '[:upper:]')=$CI_JOB_ID" >> .env

debian-installer-ubuntu20:
  image: $DOCKER_REGISTRY/rewriting/ddisasm/ubuntu20:$IMAGE_TAG
  needs:
    - 'test-ubuntu20-ddisasm-package'
    - 'test-ubuntu20-ddisasm-dbg-package'
    - 'build-ubuntu20-packages'
  <<: *debian-installer-ubuntu-template

docker-image-vars:
  stage: prebuild
  image: $DOCKER_REGISTRY/rewriting/ddisasm/ubuntu20:$IMAGE_TAG
  rules:
    - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH'
    - if: '$CI_COMMIT_REF_NAME =~ /^release-.*/'
  script:
    - GTIRB_BRANCH=$([[ $CI_COMMIT_REF_NAME =~ release-.* ]] && echo "release-$GTIRB_VERSION" || echo "master")
    - GTIRB_PPRINTER_BRANCH=$([[ $CI_COMMIT_REF_NAME =~ release-.* ]] && echo "release-$GTIRB_PPRINTER_VERSION" || echo "master")
    - echo "VERSION=$(awk '{s=(NR==1?s:s".")$2}END{print s}' version.txt)" >> .env
    - echo "GTIRB_BRANCH=$GTIRB_BRANCH" >> .env
    - echo "GTIRB_PPRINTER_BRANCH=$GTIRB_PPRINTER_BRANCH" >> .env
    - echo "GTIRB_COMMIT=$(git ls-remote https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}/rewriting/gtirb | grep "refs/heads/$GTIRB_BRANCH\$" | awk '{print $1}')" >> .env
    - echo "GTIRB_PPRINTER_COMMIT=$(git ls-remote https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}/rewriting/gtirb-pprinter | grep "refs/heads/$GTIRB_PPRINTER_BRANCH\$" | awk '{print $1}')" >> .env
    - cat .env
  artifacts:
    reports:
      dotenv: .env

docker-image:
  stage: deploy
  needs:
    - job: docker-image-vars
      artifacts: true
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]  # Override the image's entrypoint so we can specify our own script
  rules:
    - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH'
    - if: '$CI_COMMIT_REF_NAME =~ /^release-.*/'
  script:
    - echo "GTIRB_COMMIT=$GTIRB_COMMIT"
    - echo "GTIRB_PPRINTER_COMMIT=$GTIRB_PPRINTER_COMMIT"
    # Configure authentication credentials for Docker Hub and GitLab
    - >-
      echo "{\"auths\":{
        \"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"},
        \"https://index.docker.io/v1/\":{\"username\":\"$DOCKERHUB_USERNAME\",\"password\":\"$DOCKERHUB_PASSWORD\"}
      }}" > /kaniko/.docker/config.json
    # Run the kaniko executor, which will build our image (using a cache if available)
    # Push to Docker Hub
    - >-
      /kaniko/executor
      --snapshotMode=redo
      --cache=true
      --cache-repo=${DOCKER_REGISTRY}/${CI_PROJECT_PATH}/ddisasm/cache
      --context=$CI_PROJECT_DIR
      --build-arg GTIRB_BRANCH=$GTIRB_BRANCH
      --build-arg GTIRB_CACHE_KEY=$GTIRB_COMMIT
      --build-arg GTIRB_PPRINTER_BRANCH=$GTIRB_PPRINTER_BRANCH
      --build-arg GTIRB_PPRINTER_CACHE_KEY=$GTIRB_PPRINTER_COMMIT
      --dockerfile=$CI_PROJECT_DIR/Dockerfile
      --destination=${DOCKER_REGISTRY}/${CI_PROJECT_PATH}:$VERSION
      --destination=${DOCKER_REGISTRY}/${CI_PROJECT_PATH}:latest
      --destination=grammatech/ddisasm:$VERSION
      --destination=grammatech/ddisasm:latest

.apt-upload: &apt-upload
  stage: deploy-to-apt
  trigger:
    project: rewriting/utility/package-uploader
    strategy: depend

public-focal-unstable:
  <<: *apt-upload
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
  variables:
    JOB_NAME: debian-installer-ubuntu20
    APT_REPO: public
    APT_REPO_CODENAMES: focal
    APT_REPO_COMPONENT: unstable

internal-focal-unstable:
  <<: *apt-upload
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
  variables:
    JOB_NAME: debian-installer-ubuntu20
    APT_REPO: internal
    APT_REPO_CODENAMES: focal
    APT_REPO_COMPONENT: unstable

public-focal-stable:
  <<: *apt-upload
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /^release-.*/'
  variables:
    JOB_NAME: debian-installer-ubuntu20
    APT_REPO: public
    APT_REPO_CODENAMES: focal
    APT_REPO_COMPONENT: stable

internal-focal-stable:
  <<: *apt-upload
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /^release-.*/'
  variables:
    JOB_NAME: debian-installer-ubuntu20
    APT_REPO: internal
    APT_REPO_CODENAMES: focal
    APT_REPO_COMPONENT: stable

.windows-upload: &windows-upload
  stage: upload
  trigger:
    project: rewriting/utility/package-uploader
    strategy: depend
  needs: [conan-windows-release-package]

windows-upload-public:
  <<: *windows-upload
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /^release-.*/'
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
  variables:
    JOB_NAME: conan-windows-release-package
    FILESERVER: public
    FILESERVER_SUBDIR_NAME: windows-release

windows-upload-internal:
  <<: *windows-upload
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /^release-.*/'
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
  variables:
    JOB_NAME: conan-windows-release-package
    FILESERVER: internal
    FILESERVER_SUBDIR_NAME: windows-release
