//===- basic_function_inference.dl --------------------------*- datalog -*-===//
//
//  Copyright (C) 2019 GrammaTech, Inc.
//
//  This code is licensed under the GNU Affero General Public License
//  as published by the Free Software Foundation, either version 3 of
//  the License, or (at your option) any later version. See the
//  LICENSE.txt file in the project root for license terms or visit
//  https://www.gnu.org/licenses/agpl.txt.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  GNU Affero General Public License for more details.
//
//  This project is sponsored by the Office of Naval Research, One Liberty
//  Center, 875 N. Randolph Street, Arlington, VA 22203 under contract #
//  N68335-17-C-0700.  The content of the information does not necessarily
//  reflect the position or policy of the Government and no official
//  endorsement should be inferred.
//
//===----------------------------------------------------------------------===//
/**
Function inference based on call frames.
*/

.comp basic_function_inference{

.decl function_entry(Block:address)
.decl function_entry_name(Block:address,Name:symbol)
.output function_entry_name

.decl in_function(Block:address,Function:address)
.output in_function

.decl function_without_callframe(Block:address)

/**
Initial function entry discovery after code inference, but before use-def and
value analysis.
*/
.decl function_entry_initial(EA:address)

function_entry_initial(EA):-
    fde_addresses(EA,_),
    block(EA).

function_entry_initial(EA):-
    block(EA),
    (
        entry_point(EA);
        function_symbol(EA,_);
        start_function(EA);
        loaded_section(EA,_,_);
        pe_export_entry(EA,_,_);
        // TODO: Fold pc_load_call into generic arch component.
        direct_call(EA_caller,EA), code(EA_caller), !pc_load_call(EA_caller,EA)
    ).

function_entry_name(EA,SymbolName):-
    function_entry(EA),
    best_func_symbol(EA,SymbolName).

function_entry(EA):-
    function_entry_initial(EA),
    refined_block(EA).

function_entry(EA):-
    resolved_transfer(EA_caller,EA,"call"),
    code(EA_caller),
    refined_block(EA).

function_entry(EA):-
    main_function(EA),
    refined_block(EA),
    !fde_addresses(EA,_).

// pointer in special sections
function_entry(EA):-
    code_pointer_in_data(Src,EA),
    function_pointer_section(Name),
    loaded_section(Base,End,Name),
    Src >= Base,
    Src < End.

// Windows PE 'incremental linking' targets.
function_entry(EA):-
    incremental_linking(First,Last),
    code(Src),
    First <= Src, Src <= Last,
    direct_jump(Src,EA),
    code(EA).

#if defined(ARCH_ARM32)
// ARM32: Code right after literal pool
function_entry(EA):-
    binary_isa("ARM"),
    refined_block(EA),
    !function_entry_initial(EA),
    possible_target(EA),
    after_end(EA,PrevEA),
    data_object(PrevEA,_,_),
    litpool_boundaries(PrevEA,EA0),
    EA0 = EA - (EA band 1).
#endif

function_without_callframe(EA):-
    function_entry(EA),
    !fde_addresses(EA,_).

.decl in_function_initial(Block:address,Function:address)

in_function_initial(Block,Block):-
    function_entry(Block).

in_function_initial(Block,Begin):-
    function_entry(Begin),
    fde_addresses(Begin,End),
    refined_block(Block),
    Begin <= Block,
    Block < End.

// assign functions to blocks that do not fall within
// any callframe based on the assumption that functions
// are contiguous and their entry point is at the beginning

.decl not_in_function_initial(Block:address)

not_in_function_initial(Block):-
    refined_block(Block),
    !in_function_initial(Block,_).

in_function(Block,Function):-
    in_function_initial(Block,Function).

in_function(Function,Function):-
    function_without_callframe(Function).

in_function(Block,Function):-
    in_function(Block_prev,Function),
    function_without_callframe(Function),
    next_refined_block_in_byte_interval(Block_prev,Block),
    not_in_function_initial(Block),
    !function_without_callframe(Block).

}
