//===- pe_binaries.dl --------------------------------------------------*- datalog -*-===//
//
//  Copyright (C) 2019 GrammaTech, Inc.
//
//  This code is licensed under the GNU Affero General Public License
//  as published by the Free Software Foundation, either version 3 of
//  the License, or (at your option) any later version. See the
//  LICENSE.txt file in the project root for license terms or visit
//  https://www.gnu.org/licenses/agpl.txt.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  GNU Affero General Public License for more details.
//
//  This project is sponsored by the Office of Naval Research, One Liberty
//  Center, 875 N. Randolph Street, Arlington, VA 22203 under contract #
//  N68335-17-C-0700.  The content of the information does not necessarily
//  reflect the position or policy of the Government and no official
//  endorsement should be inferred.
//
//===----------------------------------------------------------------------===//

// This module defines predicates and rules specific of PE binaries

// used to get the address of a section
section(Name,Size,Addr):-
    binary_format("PE"),
    section_complete(Name,Size,Addr,_,Flags,_),
    Addr > 0.

.decl pe_section_flag(Name:symbol,Position:unsigned)

pe_section_flag("SCN_MEM_WRITE",31).
pe_section_flag("SCN_MEM_DISCARDABLE",25).
pe_section_flag("SCN_MEM_EXECUTE",29).
pe_section_flag("SHF_TLS",10).

data_section(Name):-
    section_complete(Name,_,_,Type,Flags,_),
    pe_section_flag("SCN_MEM_EXECUTE",Pos_Exec), Flags band (2^Pos_Exec)  = 0,
    section(Name, _, _).

exception_section(".pdata").
exception_section(".xdata").

special_data_section(Section):-
    exception_section(Section).

special_data_section(".idata").
special_data_section(".CRT").

code_section(Name):-
    binary_format("PE"),
    section_complete(Name,_,_,_,Flags,_),
    pe_section_flag("SCN_MEM_EXECUTE",Pos_Exec), Flags band (2^Pos_Exec)  > 0.

//function_pointer_section(".init_array"):-binary_format("PE").
function_pointer_section(".idata"):-binary_format("PE").
////////////////////////////////////////////////////////////////////////////
// detect references  to libraries (calls to plt)
//.decl plt_section(name:symbol)

plt_section(".idata").

tls_section(Name):-
    binary_format("PE"),
    data_section(Name),
    section_complete(Name,_,_,Type,Flags,_),
    //pe_section_type("TLS",Type). // .rdata is also marked TLS
    Name = ".tls".

bss_section(Name):-
    binary_format("PE"),
    section_complete(Name,_,_,Type,Flags,_),
    //pe_section_flag("SHF_ALLOC",Pos_Alloc), Flags band (2^Pos_Alloc) > 0,
    //pe_section_type("BSS",Type).
    Name = ".bss".

non_zero_data_section(Name):-
    data_section(Name),
    !bss_section(Name).

//////////////////////////////////////////////////////////////////////////
// find the main function even if it does not have a symbol
//
//.decl start_function(ea:address)
.output start_function

start_function(EA):-
    binary_format("PE"),
    function_symbol(EA,"_start").

start_function(Start_location):-
    binary_format("PE"),
    !function_symbol(Start_location,"_start"),
    entry_point(Start_location).

main_function(EA):-
    binary_format("PE"),
    function_symbol(EA,"main").

main_function(Main_location):-
    binary_format("PE"),
    !function_symbol(Main_location,"main"),
    First_call = min EA:{
        start_function(Entry),
        instruction(EA,_,_,CallOp,_,_,_,_,_,_),
        arch.call_operation(CallOp),
        code(EA),
        EA>=Entry
    },
    next(Prev,First_call),
    code(Prev),
    symbolic_operand(Prev,1,Main_location,"code").

inferred_symbol_name(EA,"_start","GLOBAL"):-
    start_function(EA).
