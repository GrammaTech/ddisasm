//===- arch_x86.dl ------------------------------------------*- datalog -*-===//
//
//  Copyright (C) 2020 GrammaTech, Inc.
//
//  This code is licensed under the GNU Affero General Public License
//  as published by the Free Software Foundation, either version 3 of
//  the License, or (at your option) any later version. See the
//  LICENSE.txt file in the project root for license terms or visit
//  https://www.gnu.org/licenses/agpl.txt.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  GNU Affero General Public License for more details.
//
//  This project is sponsored by the Office of Naval Research, One Liberty
//  Center, 875 N. Randolph Street, Arlington, VA 22203 under contract #
//  N68335-17-C-0700.  The content of the information does not necessarily
//  reflect the position or policy of the Government and no official
//  endorsement should be inferred.
//
//===----------------------------------------------------------------------===//

// Define a common set of predicates for x86 instructions and characteristics.
.comp X86 : Arch {

#include "jump_operations.dl"
#include "interrupt_operations.dl"
#include "float_operations.dl"
#include "memory_access.dl"
#include "registers_common.dl"

move_operation(Operation) :-
    instruction_get_operation(_, Operation),
    contains("MOV", Operation).

// Implicit moves w/ sign extension of AX <- AL, EAX <- AX, RAX <- EAX.
move_operation("CBW").
move_operation("CWDE").
move_operation("CDQE").

move_reg_reg(EA,"RAX","RAX"),
extend_reg(EA,"RAX",1,SrcBits):-
    instruction_get_operation(EA,Operation),
    (
        Operation = "CBW", SrcBits = 8;
        Operation = "CWDE", SrcBits = 16;
        Operation = "CDQE", SrcBits = 32
    ).

// TODO: CMOV conditions - nothing uses the CC on a mov instruction currently.
conditional_operation(Operation,"?"):-
    instruction_get_operation(_, Operation),
    substr(Operation,0,4) = "CMOV".

// No rule for load_operation
load_operation(""):- false.

// No rule for store_operation
store_operation(""):- false.

is_nop(EA):-
    instruction_get_operation(EA,"NOP").

is_nop(EA):-
    instruction(EA,_,_,"XCHG",Op,Op,0,0,_,_),
    op_regdirect(Op,"AX").

// Extend the generic case with loop operations.
jump_operation(Operation):-
    loop_operation(Operation,_).

arithmetic_operation("ADD").
arithmetic_operation("SUB").
arithmetic_operation("INC").
arithmetic_operation("DEC").
arithmetic_operation("IMUL").
arithmetic_operation("SHL").

multiplication_operation("IMUL").
multiplication_operation("SHL").

shift_rotate_operation("SHL").
shift_rotate_operation("SAL").
shift_rotate_operation("SHR").
shift_rotate_operation("SAR").
shift_rotate_operation("ROR").
shift_rotate_operation("ROL").
shift_rotate_operation("RCR").
shift_rotate_operation("RCL").

logic_operation("AND").
logic_operation("XOR").
logic_operation("OR").
logic_operation("TEST").

.decl loop_operation(Operation:symbol,CC:condition_code)
loop_operation("LOOP","NE").

// LOOPcc instructions check two conditions: ECX = 0 AND ZF = ?
// This is too complex to represent with our standardized condition codes.
loop_operation("LOOPE","?").
loop_operation("LOOPZ","?").
loop_operation("LOOPNE","?").
loop_operation("LOOPNZ","?").

conditional_operation(Operation,CC),
cmp_zero_operation(Operation):-
    instruction_get_operation(_, Operation),
    loop_operation(Operation,CC).

loop_prefix("REP").
loop_prefix("REPE").
loop_prefix("REPNE").

call_operation("CALL").

syscall_operation("SYSCALL").

return_operation("RET").

halt_operation("HLT").
halt_operation("UD0").
halt_operation("UD1").
halt_operation("UD2").

cmp_operation("CMP").
cmp_operation("TEST").

cmp_zero_operation("JCXZ").
cmp_zero_operation("JECXZ").
cmp_zero_operation("JRCXZ").

// FIXME: review this list when Capstone is updated.
data_access_size("MOVSD",as(DestReg,register),8):-
    op_regdirect(_,DestReg).

data_access_size("LEA",as(DestReg,register),0):-
    op_regdirect(_,DestReg).

// ADD reg, imm
reg_arithmetic_operation(EA,Reg,Reg,1,Immediate):-
    instruction(EA,_,_,"ADD",Op1,Op2,0,0,_,_),
    op_immediate(Op1,Immediate,_),
    op_regdirect_contains_reg(Op2,Reg).

// SUB reg, imm
reg_arithmetic_operation(EA,Reg,Reg,1,-Immediate):-
    instruction(EA,_,_,"SUB",Op1,Op2,0,0,_,_),
    op_immediate(Op1,Immediate,_),
    op_regdirect_contains_reg(Op2,Reg).

// INC reg
reg_arithmetic_operation(EA,Reg,Reg,1,1):-
    instruction(EA,_,_,"INC",Op1,0,0,0,_,_),
    op_regdirect_contains_reg(Op1,Reg).

// DEC reg
reg_arithmetic_operation(EA,Reg,Reg,1,-1):-
    instruction(EA,_,_,"DEC",Op1,0,0,0,_,_),
    op_regdirect_contains_reg(Op1,Reg).

//shl reg immediate
reg_arithmetic_operation(EA,Reg,Reg,2^Shift,0):-
    instruction(EA,_,_,"SHL",Op1,Op2,0,0,_,_),
    op_immediate(Op1,Shift,_),
    op_regdirect_contains_reg(Op2,Reg).

//mul reg immediate
reg_arithmetic_operation(EA,Reg,Reg,Mult,0):-
    instruction(EA,_,_,"IMUL",Op1,Op2,0,0,_,_),
    op_immediate(Op1,Mult,_),
    op_regdirect_contains_reg(Op2,Reg).

//mul reg reg immediate
reg_arithmetic_operation(EA,Dst,Src,Mult,0):-
    instruction(EA,_,_,"IMUL",Op1,Op2,Op3,0,_,_),
    op_immediate(Op2,Mult,_),
    op_regdirect_contains_reg(Op3,Dst),
    op_regdirect_contains_reg(Op1,Src).

//lea reg [reg_origin*Multiplier+Offset]
reg_arithmetic_operation(EA,Reg,Reg_origin_nn,Mult,Offset):-
    instruction(EA,_,_,"LEA",Op1,Op2,0,0,_,_),
    op_indirect_mapped(Op1,_,"NONE",Reg_origin,Mult,Offset,_),
    reg_nonnull(Reg_origin,Reg_origin_nn),
    op_regdirect_contains_reg(Op2,Reg).

//lea reg [reg_origin+Offset]
reg_arithmetic_operation(EA,Reg,Reg_origin_nn,1,Offset):-
    instruction(EA,_,_,"LEA",Op1,Op2,0,0,_,_),
    op_indirect_mapped(Op1,_,Reg_origin,"NONE",1,Offset,_),
    reg_nonnull(Reg_origin,Reg_origin_nn),
    op_regdirect_contains_reg(Op2,Reg).

// push and pop modify the stack pointer
reg_arithmetic_operation(EA,StackReg,StackReg,1,Offset):-
    arch.stack_pointer(StackReg),
    instruction(EA,_,_,OpCode,Op,0,0,0,_,_),
    (
        OpCode = "PUSH",
        Sign = -1
        ;
        OpCode = "POP",
        Sign = 1
    ),
    (
        op_regdirect(Op,Reg),
        arch.register_size_bytes(Reg,SizeBytes)
        ;
        op_indirect(Op,_,_,_,_,_,SizeBytes)
        ;
        op_immediate(Op,_,SizeBytes)
    ),
    Offset = Sign * as(SizeBytes,number).

reg_reg_arithmetic_operation(EA,Reg2,Reg2,Reg1,-1,0):-
    instruction(EA,_,_,"SUB",Op1,Op2,0,0,_,_),
    op_regdirect_contains_reg(Op1,Reg1),
    op_regdirect_contains_reg(Op2,Reg2).

reg_reg_arithmetic_operation(EA,Reg2,Reg1,Reg2,1,0):-
    instruction(EA,_,_,"ADD",Op1,Op2,0,0,_,_),
    op_regdirect_contains_reg(Op2,Reg2),
    op_regdirect_contains_reg(Op1,Reg1).

//lea reg [reg1 + reg2*Multiplier+Offset]
reg_reg_arithmetic_operation(EA,Reg_def,Reg1_nn,Reg2_nn,Mult,Offset):-
    instruction(EA,_,_,"LEA",Op1,Op2,0,0,_,_),
    op_regdirect_contains_reg(Op2,Reg_def),
    op_indirect_mapped(Op1,_,Reg1,Reg2,Mult,Offset,_),
    reg_nonnull(Reg1,Reg1_nn),
    reg_nonnull(Reg2,Reg2_nn).

extend_reg(EA,SrcMapped,Signed,8*SrcBytes):-
    instruction(EA,_,_,Operation,Op1,_,0,0,_,_),
    (
        Operation = "MOVZX", Signed = 0;
        Operation = "MOVSX", Signed = 1;
        Operation = "MOVSXD", Signed = 1
    ),
    move_operation(Operation),
    op_regdirect(Op1,Src),
    register_size_bytes(Src,SrcBytes),
    reg_map(Src,SrcMapped).

extend_load(EA,Signed,8*SizeAccess):-
    load(EA,SrcOpIndex,_,_,_,_,_,_),
    instruction_get_operation(EA,Operation),
    (
        Operation = "MOVZX", Signed = 0;
        Operation = "MOVSX", Signed = 1;
        Operation = "MOVSXD", Signed = 1
    ),
    instruction_memory_access_size(EA,SrcOpIndex,SizeAccess).

pc_relative_addr(EA,Reg,Base):-
    instruction_get_operation(EA,"LEA"),
    instruction_get_dest_op(EA,_,DestOp),
    op_regdirect_contains_reg(DestOp,Reg),
    instruction_get_src_op(EA,SrcOpIndex,_),
    pc_relative_operand(EA,SrcOpIndex,Base).

reg_relative_load(EA,BaseRegNN,Offset,Size):-
    load(EA,MemOp,_,_,BaseReg,"NONE",_,Offset),
    reg_nonnull(BaseReg,BaseRegNN),
    !pc_reg(BaseReg),
    instruction_memory_access_size(EA,MemOp,Size).

simple_data_load(EA,Data,Size):-
    pc_relative_operand(EA,MemIndex,Data),
    load(EA,MemIndex,_,_,_,_,_,_),
    instruction_memory_access_size(EA,MemIndex,Size),
    Size != 0.

// Operation that requires aligned memory
.decl operation_alignment_required(Operation:symbol)

// The following AVX instructions require explicitly aligned memory
// (See Table 15-6 in https://cdrdv2.intel.com/v1/dl/getContent/671200):

operation_alignment_required("MOVDQA").
operation_alignment_required("MOVAPS").
operation_alignment_required("MOVAPD").
operation_alignment_required("MOVNTPS").
operation_alignment_required("MOVNTPD").
operation_alignment_required("MOVNTDQ").
operation_alignment_required("MOVNTDQA").

operation_alignment_required("VMOVDQA").
operation_alignment_required("VMOVAPS").
operation_alignment_required("VMOVAPD").
operation_alignment_required("VMOVNTPS").
operation_alignment_required("VMOVNTPD").
operation_alignment_required("VMOVNTDQ").
operation_alignment_required("VMOVNTDQA").

operation_alignment_required(Operation):-
    instruction_get_operation(_, Operation),
    (
        // Floating-Point/Integer Packed Arithmetic
        substr(Operation,0,4) = "ADDP";
        substr(Operation,0,4) = "SUBP";
        substr(Operation,0,4) = "MULP";
        substr(Operation,0,4) = "DIVP";

        // Integer Packed Arithmetic
        substr(Operation,0,4) = "PADD";
        substr(Operation,0,4) = "PSUB";
        substr(Operation,0,4) = "PMUL";
        substr(Operation,0,4) = "PDIV";

        // Logical Packed Operations
        substr(Operation,0,4) = "ANDP";
        substr(Operation,0,3) = "ORP";
        substr(Operation,0,4) = "XORP";

        substr(Operation,0,4) = "PAND";
        substr(Operation,0,3) = "POR";
        substr(Operation,0,4) = "PXOR";

        // Packed Shifts and Blends
        substr(Operation,0,4) = "PSLL";
        substr(Operation,0,4) = "PSRL";
        substr(Operation,0,4) = "PSRA"
    ).

alignment_required(EA,AlignInBits):-
    instruction_get_operation(EA,Operation),
    operation_alignment_required(Operation),
    instruction_memory_access_size(EA,_,AlignInBits).

}
