//===- symbolization.dl -------------------------------------*- datalog -*-===//
//
//  Copyright (C) 2019 GrammaTech, Inc.
//
//  This code is licensed under the GNU Affero General Public License
//  as published by the Free Software Foundation, either version 3 of
//  the License, or (at your option) any later version. See the
//  LICENSE.txt file in the project root for license terms or visit
//  https://www.gnu.org/licenses/agpl.txt.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  GNU Affero General Public License for more details.
//
//  This project is sponsored by the Office of Naval Research, One Liberty
//  Center, 875 N. Randolph Street, Arlington, VA 22203 under contract #
//  N68335-17-C-0700.  The content of the information does not necessarily
//  reflect the position or policy of the Government and no official
//  endorsement should be inferred.
//
//===----------------------------------------------------------------------===//
/**
This module performs symbolization.
It uses the results of several analysis:
 -use_def
 -value
 -data_access

Part of symbolization is pointer reattribution, that is detecting cases
where a number is the result of a symbol+constant. This is done in an
independent module 'pointer_reattribution' which also uses the results
of these analyses.

The data symbolization itself uses the following heuristics:

  - address_array: whether we have potential symbols evenly
    spaced. The more symbols the less likely they are all value
    collisions. We require at least 3 symbols evenly spaced to
    consider it an array.

  - preferred_data_access and data_access_patterns (from the data_access analysis):
    - if an address is accessed with the size of the pointer, it is more likely to be a pointer.
    - if an address is accessed with a size other than the size of the pointers, it is almost
      certainly not a pointer.

  - strings: if we have a pointer candidate in what seems to be a string,
    it is less likely to be a pointer.

  - aligned location: if a pointer candidate is aligned, it is more
    likely to be a pointer. Compilers usually (but not always) store
    pointers aligned.

This module also computes and symbol_minus_symbol.
*/

#include "empty_range.dl"
#include "noreturn.dl"
#include "use_def_analysis.dl"
#include "value_analysis.dl"
#include "boundary_value_analysis.dl"
#include "data_access_analysis.dl" // data_access_analysis uses predicates from here
#include "pointer_reattribution.dl"
#include "register_type_analysis.dl"

/**
Instruction at address 'EA' has a symbolic operand with value 'Value'.
'Value' is given as an address.
The field 'Index' identifies which operand is symbolic and 'Type' specifies
if the target is "data" or "code".
This predicate only supports symbolic expressions with one symbol and no
offset. For symbolic operands with offset see `moved_label`.
*/
.decl symbolic_operand(EA:address,Index:operand_index,Value:address,Type:symbol)

/**
There is a symbolic expression in the data at address 'EA' of size 'Size'
pointing to 'Value'. 'Value' is given as an address.
This predicate only supports symbolic expressions with one symbol
and no offset. For symbolic expressions in data with offset see
`moved_data_label` and for symbol-symbol expressions
see `symbol_minus_symbol`.
*/
.decl symbolic_data(EA:address,Size:unsigned,Value:address)

/**
There is a symbolic expression in data at address 'EA' of size 'Size' of the form:

'(Symbol2-Symbol1)*Scale+Offset'

Both symbols are given as addresses.
*/
.decl symbol_minus_symbol(EA:address,Size:unsigned,Symbol1:address,Symbol2:address,Scale:unsigned,Offset:number)

/**
 There is a symbolic expression at address 'EA' of size 'Size' of the form:

Symbol+Offset

 This symbolic expression corresponds to a relocation and the symbol
is referenced by name.
 */
.decl symbolic_expr_from_relocation(EA:address,Size:unsigned,Symbol:symbol,Offset:number,TargetEA:address)

/**
 There is a symbolic expression at address 'EA' of size 'Size' of the form:

(Symbol2-Symbol1)*Scale+Offset

This symbolic expression corresponds to a relocation and the symbol
is referenced by name.
 */
.decl symbol_minus_symbol_from_relocation(EA:address,Size:unsigned,Symbol1:symbol,Symbol2:symbol,Scale:unsigned,Offset:number)

// Not all ISAs have these
symbol_minus_symbol_from_relocation(0,0,"","",1,0):- false.

/**
There is a symbolic expression at address 'EA' of size 'Size' of the form:

'Symbol+Offset'

In contrast to `symbolic_operand` and `symbolic_data`, the symbol in this
predicate is referred by name. This allows us to include symbolic expressions
from relocations and to choose between multiple symbols at the same location.
This predicate captures all symbolic expressions from `symbolic_operand`,
`moved_label`, `symbolic_data`, `moved_data_label`,
and `symbolic_expr_from_relocation`.
*/
.decl symbolic_expr(EA:address,Size:unsigned,Symbol:symbol,Offset:number)
.output symbolic_expr

/**
There is a symbolic expression at address 'EA' of size 'Size' of the form:
  '(Symbol2-Symbol1)*Scale+Offset'
The symbols in this predicate are referred by name.
*/
.decl symbolic_expr_symbol_minus_symbol(EA:address,Size:unsigned,Symbol:symbol,Symbol2:symbol,Scale:unsigned,Offset:number)
.output symbolic_expr_symbol_minus_symbol

/**
The symbolic operand at address 'EA' and 'Index' has a symbolic expression
attribute 'Attribute'. Note that some attributes may be inferred but not used,
if the corresponding `symbolic_operand` is not selected.
*/
.decl symbolic_operand_attribute(EA:address,Index:unsigned,Attribute:symbol)

symbolic_operand_attribute(0,0,""):- false.

/**
The symbolic expression at address 'EA' has a symbolic expression
attribute 'Attribute'.
*/
.decl symbolic_expr_attribute(ea:address,attribute:symbol)
.output symbolic_expr_attribute

/**
There is a symbolic expression in data at address 'EA' pointing to
a code block at address 'Val'.
*/
.decl code_pointer_in_data(EA:address,Val:address)

/**
The address 'Ea' needs to be labeled so it can be referred
in symbolic expressions.
*/
.decl labeled_ea(Ea:address)

// How data sections are divided into elements by labels or data objects
.decl data_object_boundary(EA:address)
.output data_object_boundary

// labels of un-initialized data
.decl bss_data(ea:address)
.output bss_data

////////////////////////////////////////////////////////////////////////////////////
// candidates of symbolic values in the code

.decl symbolic_operand_candidate(ea:address,operand_index:operand_index,Dest:address,Type:symbol)
.decl symbolic_operand_point(ea:address,operand_index:operand_index,points:number,why:symbol)
.decl symbolic_operand_total_points(ea:address,operand_index:operand_index,points:number) inline

// Symbolic operands that can occur in any binary type
symbolic_operand_candidate(EA,Op_index,Dest,Type):-
    code(EA),
    instruction_get_op(EA,Op_index,Op),
    (
        direct_call(EA,Dest),
        op_immediate(Op,_,_),
        arch.call(EA,Op_index)
        ;
        direct_jump(EA,Dest),
        op_immediate(Op,_,_),
        //ignore artificial jumps from loop prefixes
        !instruction_has_loop_prefix(EA),
        instruction_get_operation(EA,Operation),
        arch.jump_operation_op_index(Operation,Op_index)
        ;
        pc_relative_operand(EA,Op_index,Dest),
        UNUSED(Op)
        ;
        split_load_operand(EA,Op_index,Dest),
        UNUSED(Op)
    ),
    (
        code(Dest), Type = "code"
        ;
        data_segment(Begin,End),
        Dest >= Begin,
        Dest <= End,
        Type = "data"
    ).

// Symbolic operands that can only occur in executables
symbolic_operand_candidate(EA,Op_index,Dest_addr,Type):-
    binary_type("EXEC"),
    code(EA),
    instruction_get_op(EA,Op_index,Op),
    (
        op_immediate(Op,Dest,_),
        Dest_addr = as(Dest,address),
        !split_load_operand(EA,Op_index,_),
        !direct_call(EA,_),
        !direct_jump(EA,_)
        ;
        op_indirect(Op,_,_,_,_,Dest,_),
        Dest_addr = as(Dest,address),
        !pc_relative_operand(EA,Op_index,_),
        !split_load_operand(EA,Op_index,_)
    ),
    (
        code(Dest_addr), Type="code"
        ;
        data_segment(Begin,End),
        Dest_addr >= Begin, Dest_addr <= End,
        Type = "data"
    ).

// Deal with pie and relocatable code
symbolic_operand_candidate(EA,Op_index,Dest,Type):-
    !binary_type("EXEC"),
    !binary_type("REL"),
    code(EA),
    (
        instruction_immediate_offset(EA,Op_index,Offset,_)
        ;
        instruction_displacement_offset(EA,Op_index,Offset,_)
    ),
    relocation(EA+Offset,_,Symbol,Addend,_,_,_),
    symbol(SymbolAddr,_,_,_,_,_,_,_,Symbol),
    Dest = as(as(SymbolAddr,number)+Addend,address),
    (
        code(Dest), Type = "code"
        ;
        data_segment(Begin,End),
        Dest >= Begin,
        Dest <= End,
        Type = "data"
    ).

// Handle PE base-relative relocations.
symbolic_operand_candidate(EA,Index,Dest,Type):-
    binary_format("PE"),
    code(EA),
    (
        instruction_immediate_offset(EA,Index,Offset,_),
        instruction_get_op(EA,Index,Op),
        op_immediate(Op,Value,_)
        ;
        instruction_displacement_offset(EA,Index,Offset,_),
        instruction_get_op(EA,Index,Op),
        op_indirect(Op,_,_,_,1,Value,_)
    ),
    relocation(EA+Offset,_,_,_,_,_,_),
    Dest = as(Value,address),
    (
        code(Dest),
        Type = "code"
        ;
        data_segment(Begin,End),
        Dest >= Begin, Dest <= End,
        Type = "data"
    ).

/////////////////////////////////////////////////////////////////
/// Final decision on symbolization of operands

// no decision needs to be made with pie code
symbolic_operand_point(EA,Index,10,"pie code"):-
    !binary_type("EXEC"),
    symbolic_operand_candidate(EA,Index,_,_).

symbolic_operand_point(EA,Imm_index,-1,"compared to non-address"):-
    cmp_immediate_to_reg(EA,Reg,Imm_index,_),
    reg_def_use.def_used(EA_def,Reg,EA,_),
    def_register_is_not_base_address(EA_def,Reg).

symbolic_operand_point(EA,Imm_index,-1,"immediate is bitmask"):-
    symbolic_operand_candidate(EA,Imm_index,_,_),
    instruction_get_op(EA,Imm_index,Op),
    op_immediate(Op,_,_),
    instruction_get_operation(EA,Operation),
    arch.logic_operation(Operation).

symbolic_operand_point(EA,Imm_index,-2,"point to exception section"):-
    symbolic_operand_candidate(EA,Imm_index,Dest,_),
    exception_section(Name),
    loaded_section(Base,End,Name),
    Base <= Dest, Dest < End.

symbolic_operand_point(EA,Imm_index,-1,"operated on logical operation result"):-
    op_immediate_and_reg(EA,_,Reg,Imm_index,_),
    !arch.jump(EA),
    reg_def_use.def_used(EA_def,Reg,EA,_),
    instruction_get_operation(EA_def,Operation),
    arch.logic_operation(Operation),
    !low_pass_filter(EA_def),
    !is_xor_reset(EA_def).

symbolic_operand_point(EA,1,-1,"result of LEA not base address"):-
    binary_format("ELF"),
    symbolic_operand_candidate(EA,1,_,_),
    !pc_relative_operand(EA,_,_),
    instruction(EA,_,_,"LEA",Op1,Op2,0,0,_,_),
    op_regdirect_contains_reg(Op2,Reg_def),
    op_indirect(Op1,_,_,_,_,_,_),
    def_register_is_not_base_address(EA,Reg_def).

symbolic_operand_point(EA,Op_index,-1,"moved/compared-with-different-size"):-
    symbolic_operand_candidate(EA,Op_index,_,_),
    instruction_get_op(EA,Op_index,Op),
    op_immediate(Op,_,_),
    instruction_get_op(EA,_,Op2),
    op_indirect(Op2,_,_,_,_,_,Size),
    arch.pointer_size(Pt_size),
    Size < Pt_size.

symbolic_operand_point(EA,Op_index,1,"used-for-address"):-
    symbolic_operand_candidate(EA,Op_index,_,_),
    instruction_get_op(EA,Op_index,Op),
    op_immediate(Op,_,_),
    def_used_for_address(EA,_,_).

symbolic_operand_total_points(EA,Operand,Points):-
    symbolic_operand_candidate(EA,Operand,_,_),
    (
        Points = sum X:{symbolic_operand_point(EA,Operand,X,_)};
        !symbolic_operand_point(EA,Operand,_,_), Points = 0
    ).

symbolic_operand(EA,Op_index,Value,Type):-
    symbolic_operand_candidate(EA,Op_index,Value,Type),
    symbolic_operand_total_points(EA,Op_index,Points),
    Points >= 0.

///////////////////////////////
// label candidates before moving
.decl labeled_data_candidate(EA:address)

labeled_data_candidate(EA):-
    !binary_isa("ARM"),
    symbol(EA,_,_,_,_,_,_,_,_).

labeled_data_candidate(EA):-
    symbolic_operand(_,_,EA,"data").

labeled_data_candidate(Val):-
    address_in_data_refined(EA,Val),
    arch.pointer_size(Pt_size),
    EA % Pt_size = 0.

// Detect symbol-symbol
////////////////////////////////////////////////////////////////////////

/**
A candidate for a symbol-symbol in data (includes jump tables and other relative symbols)
*/
.decl symbol_minus_symbol_candidate(EA:address,Size:unsigned,Symbol1:address,Symbol2:address,Scale:unsigned,Offset:number)

symbol_minus_symbol_candidate(EA,Size,Symbol1,Symbol2,as(Scale,unsigned),Offset):-
    relative_jump_table_entry(EA,_,Size,Reference,Dest,Scale,Offset),
    (
        Scale > 0, Symbol1 = Reference, Symbol2 = Dest;
        Scale < 0, Symbol1 = Dest, Symbol2 = Reference
        // Scale = 0 is nonsense.
    ),
    // If Symbol1 is zero, we have an absolute address.
    Symbol1 != 0.

// Displacements in indirect operands with address-value register
// need to be symbolized.
//
// E.g., `__memcpy_ssse3` in libc.so:
// 01:.L_1:
// 02:    leaq 40(%r9),%r9
// 03:    cmpq %rcx,%rdx
// 04:    movaps -12(%rsi),%xmm1
// 05:    jb .L_aade7
// 06:    leaq -7(%r9),%r9
// 07:.L_2:
// 08:    leaq -64(%rdx),%rdx
// 09:    notrack jmpq *%r9
// 10:    ud2
// 11:.L_3:
// 12:    prefetchnta -448(%rsi)
// 13:.L_4:
// 14:    movaps -28(%rsi),%xmm2
//
// .L_1 is one of the targets of a jump-table jump (jmp %9).
// Before line 2, R9's value is the address of itself.
// After line2 (.L_1 + 40 = .L_4), R9's value is .L_4.
// Note that the LEA instructions can be encoded in either 4 bytes or
// 7 bytes depending on assemblers.
// Therefore, it is important to symbolize the displacements.
//
// Similarly, before line 6, R9's value is the address of .L_4.
// After line 6 (.L_4 - 7 = .L3), R9's value is .L_3.
//
// The displacements ini the indirect operands for both the LEAs
// at line 2 and 6 need to be symbolized as
// leaq (.L_4 - .L_1)(%r9), %r9
// and
// leaq (.L_3 - .L_4)(%r9), %r9
// respectively.
//
symbol_minus_symbol_candidate(EA+DispOffset,DispSize,Symbol1,Symbol2,1,0):-
    binary_isa("X64"),
    code(EA),
    value_reg_address_before(EA,Reg,Address,_),
    !arch.pc_reg(Reg),
    !instruction_has_relocation(EA,_),
    instruction_get_op(EA,Index,Op),
    op_indirect_mapped(Op,"NONE",Reg,"NONE",1,Disp,_),
    Symbol1 = as(Address,address),
    Symbol2 = as(Address+Disp,address),
    instruction_displacement_offset(EA,Index,DispOffset,DispSize).


////////////////////////////////////////////////////////////////////////

/**
The address appearing at 'EA' is within a potential
`ascii_string` and therefore more likely to be spurious.
*/
.decl address_in_data_is_printable(EA:address)

address_in_data_is_printable(EA):-
    arch.pointer_size(Pt_size),
    ascii_string(EAString,End),
    address_in_data(EA,_),
    EAString <= EA, EA <= End - Pt_size.

// address_in_data considers anything that points to the code region
// this refinement restricts that to the beginning of the final blocks
.decl address_in_data_refined(EA:address,Val:address)

address_in_data_refined(EA,Val):-
    binary_type("DYN"),
    address_in_data(EA,Val),
    relocation(EA,_,_,_,_,_,_),
    data_segment(Beg,End),
    Val >= Beg, Val <= End.

address_in_data_refined(EA,Val):-
    binary_type("DYN"),
    address_in_data(EA,Val),
    relocation(EA,_,_,_,_,_,_),
    block(Val).

address_in_data_refined(EA,Val):-
    binary_type("EXEC"),
    address_in_data(EA,Val),
    data_segment(Beg,End),
    Val >= Beg,
    Val <= End,
    data_segment(Beg0,End0),
    arch.pointer_size(PtSize),
    EA >= Beg0,
    EA + PtSize <= End0.

address_in_data_refined(EA,Val):-
    binary_type("EXEC"),
    address_in_data(EA,Val),
    block(Val),
    data_segment(Beg0,End0),
    arch.pointer_size(PtSize),
    EA >= Beg0,
    EA + PtSize <= End0.


.init address_in_data_refined_range=empty_range

address_in_data_refined_range.in_ea(EA):-
    address_in_data_refined(EA,_).

/**
Data-object analysis for string encodings.

Possible string of some 'Encoding' at interval ['EA','End').
*/
.decl string(EA:address,End:address,Encoding:symbol)
.output string

.decl string_candidate(EA:address,End:address,Encoding:symbol)

.decl string_candidate_refined(EA:address,End:address,Encoding:symbol)

string_candidate(EA,End,"ascii"):-
    ascii_string(Beg,End),
    (
      labeled_data_candidate(EA);
      preferred_data_access(_,_,EA)
    ),
    EA >= Beg, EA < End,
    data_segment(DataBeg,DataEnd),
    EA >= DataBeg,
    End <= DataEnd.

string_candidate(EA,End,"ascii"):-
    string_candidate(_,EA,"ascii"),
    ascii_string(EA,End),
    data_segment(DataBeg,DataEnd),
    EA >= DataBeg,
    End <= DataEnd.

/**
String candidate refinement projects candidate string references onto a compound
domain of "ascii" or "string" typed data objects, where "string" typed objects
are null-terminated.

Consider the compiler optimization of referencing a common substring:

    .L01:
            .ascii "xeon_ph"
    .L02:
            .string "i"

Referenced from `.L01' is the string "xeon_phi\0" referenced from `.L02' "i\0".
*/

string_candidate_refined(EA,End,"string"):-
    string_candidate(_,End,"ascii"),
    data_byte(End-1,0),
    EA = max EA : { string_candidate(EA,End,"ascii") }.

string_candidate_refined(EA,End,"ascii"):-
    string_candidate_refined(Tail,TailEnd,"string"),
    string_candidate(EA,TailEnd,"ascii"), EA < Tail,
    End = min Next : { string_candidate(Next,TailEnd,"ascii"), Next > EA }.

string(EA,End,Encoding):-
    data_object(EA,Size,"string"),
    string_candidate_refined(EA,End,Encoding),
    Size = End-EA.

///////////////////////////////////////////////////////////////////////////
.decl data_object_candidate(ea:address,size:unsigned,type:symbol)

.decl data_object_point(ea:address,size:unsigned,type:symbol,points:number,why:symbol)

.decl data_object_conflict(ea:address,size:unsigned,type:symbol,ea2:address,size2:unsigned,type2:symbol)

.decl discarded_data_object(ea:address,size:unsigned,type:symbol)

.decl data_object(ea:address,size:unsigned,type:symbol)

data_object_candidate(EA,Size,"symbol-symbol"):-
    symbol_minus_symbol_candidate(EA,Size,_,_,_,_).

data_object_candidate(EA,Pt_size,"symbol"):-
    arch.pointer_size(Pt_size),
    address_in_data_refined(EA,Dest),
    !impossible_jump_target(Dest).

data_object_candidate(EA,Size,"string"):-
    string_candidate_refined(EA,End,_),
    Size = End-EA.

data_object_candidate(EA,Size,"other"):-
    preferred_data_access(EA,Size,_),
    !address_in_data_refined(EA,_),
    !symbol_minus_symbol_candidate(EA,Size,_,_,_,_).

///////////////////////////////////////////////////////////////////////////////////////////
// Heuristic: If there are at least 3 consecutive addresses
//  we consider that we found an array of addresses
// we do not cross labels
.decl after_address_in_data(EA:address,EA_next:address)

after_address_in_data(EA,EA+Pt_size):-
    address_in_data_refined(EA,_),
    arch.pointer_size(Pt_size),
    data_byte(EA+Pt_size,_),
    !labeled_data_candidate(EA+Pt_size).

after_address_in_data(EA,EA_aux+1):-
    after_address_in_data(EA,EA_aux),
    !address_in_data_refined(EA_aux,_),
    data_byte(EA_aux+1,_),
    !labeled_data_candidate(EA_aux+1).

.decl next_address_in_data(EA:address,EA_next:address)


next_address_in_data(EA,EA_next):-
    address_in_data_refined(EA,_),
    after_address_in_data(EA,EA_next),
    address_in_data_refined(EA_next,_).

/**
Auxiliary predicate to compute `address_array`.
*/
.decl address_array_aux(EA:address,Distance:unsigned,type:symbol,InitialEA:address)

// The base cases check for three consecutive pointers.
address_array_aux(EA,Diff,"code",EA):-
    address_in_data_refined(EA,Dest1),code(Dest1),
    (
      binary_format("PE");
      arch.pointer_size(Pt_size),
      EA % Pt_size = 0
    ),
    next_address_in_data(EA,EA_next),
    Diff = EA_next-EA,
    // Make sure EA contains the FIRST evenly spaced pointer
    // of the sequence. Either there is no previous
    // pointer at the right distance or it does not point
    // to code.
    (
        !next_address_in_data(EA-Diff,EA)
        ;
        next_address_in_data(EA-Diff,EA),
        address_in_data_refined(EA-Diff,Dest_prev),
        !code(Dest_prev)

    ),
    address_in_data_refined(EA+Diff,Dest2),code(Dest2),
    next_address_in_data(EA+Diff,EA+(2*Diff)),
    address_in_data_refined(EA+(2*Diff),Dest3),code(Dest3).


address_array_aux(EA,Diff,"data",EA):-
    address_in_data_refined(EA,Dest1),data_byte(Dest1,_),
    arch.pointer_size(Pt_size),
    EA % Pt_size = 0,
    next_address_in_data(EA,EA_next),
    Diff = EA_next-EA,
    data_segment(Begin,End),
    Begin <= Dest1, Dest1 <= End,
    // Make sure EA contains the FIRST evenly spaced pointer
    // of the sequence. Either there is no previous
    // pointer or it points ouside the data segment.
    (
        !next_address_in_data(EA-Diff,EA)
        ;
        next_address_in_data(EA-Diff,EA),
        address_in_data_refined(EA-Diff,Dest_prev),
        (Dest_prev < Begin ; Dest_prev > End)
    ),
    // A pointer array pointing to data, should point to the same section
    address_in_data_refined(EA+Diff,Dest2),data_byte(Dest2,_),
    next_address_in_data(EA+Diff,EA+(2*Diff)),
    address_in_data_refined(EA+(2*Diff),Dest3),data_byte(Dest3,_),
    Begin <= Dest2, Dest2 <= End,
    Begin <= Dest3, Dest3 <= End.


address_array_aux(EA+Diff,Diff,"code",InitialEA):-
    address_array_aux(EA,Diff,"code",InitialEA),
    next_address_in_data(EA,EA+Diff),
    address_in_data_refined(EA+Diff,Dest),code(Dest).

address_array_aux(EA+Diff,Diff,"data",InitialEA):-
    address_array_aux(EA,Diff,"data",InitialEA),
    address_in_data_refined(EA,Dest1),
    next_address_in_data(EA,EA+Diff),
    address_in_data_refined(EA+Diff,Dest2),data_byte(Dest2,_),
    data_segment(Begin,End),
    // a pointer array pointing to data, should point to the same section
    Begin <= Dest1, Dest1 <= End,
    Begin <= Dest2, Dest2 <= End.

/**
This predicate is used for the symbolization heuristics. The
pointer candidate at address 'EA' belongs to a sequence of
evenly spaced pointer candidates starting at address 'InitialEA'.
The space between pointers is 'Distance'. This sequence
has at least three pointers. All the pointers in a sequence
either point to code or to the same `data_segment`.
*/
.decl address_array(EA:address,Distance:unsigned,InitialEA:address)

address_array(EA,Distance,InitialEA):-
    address_array_aux(EA,Distance,_,InitialEA).

.init address_array_range=empty_range

address_array_range.in_ea(EA):-
    address_array(EA,_,_).


//////////////////////////////////////////////////////////////////////////////////
// Final decision on symbolization of data

data_object_point(EA,Pt_size,Type,-2,"data object bias"):-
    data_object_candidate(EA,Pt_size,Type).

// Exception sections are symbolized directly without heuristics.
// Any candidates detected here are considered spurious.
data_object_point(EA,Size,Type,-100,"in-exception-section"):-
    data_object_candidate(EA,Size,Type),
    exception_section(Name),
    loaded_section(Base,End,Name),
    EA >= Base, EA < End.

data_object_point(EA,8,"symbol-symbol",5,"quad symbol-symbol"):-
    data_object_candidate(EA,8,"symbol-symbol").

data_object_point(EA,Size,"symbol-symbol",4,"symbol-symbol"):-
    data_object_candidate(EA,Size,"symbol-symbol"),
    Size <= 4.

// Pointer array heuristic
data_object_point(EA,Pt_size,"symbol",3,"pointer array"):-
    data_object_candidate(EA,Pt_size,"symbol"),
    address_array(EA,_,_).

// a pointer array should point to elements of the same type
// the pointed elements get points if they are all the same type
data_object_point(EA,Size,Type,2,"pointed by pointer array"),
data_object_point(EA2,Size2,Type,2,"pointed by pointer array"),
data_object_point(EA3,Size3,Type,2,"pointed by pointer array"),
data_object_point(EA4,Size4,Type,2,"pointed by pointer array"):-
    address_array(EA_array,Distance,InitialEA),
    address_in_data(EA_array,EA),
    data_object_candidate(EA,Size,Type),

    address_array(EA_array+Distance,Distance,InitialEA),
    address_in_data(EA_array+Distance,EA2),
    data_object_candidate(EA2,Size2,Type),

    address_array(EA_array+2*Distance,Distance,InitialEA),
    address_in_data(EA_array+2*Distance,EA3),
    data_object_candidate(EA3,Size3,Type),

    address_array(EA_array+3*Distance,Distance,InitialEA),
    address_in_data(EA_array+3*Distance,EA4),
    data_object_candidate(EA4,Size4,Type).

// data access heuristic
data_object_point(EA,Pt_size,"symbol",5,"data access"):-
    data_object_candidate(EA,Pt_size,"symbol"),
    (
        preferred_data_access(EA,Pt_size,_);
        preferred_data_access(EA,0,_)
    ).

// if we conflict with several other candidates we reduce the points
data_object_point(EA,Pt_size,"symbol",-2,"multiple conflict"):-
    data_object_candidate(EA,Pt_size,"symbol"),
    data_object_conflict(EA,Pt_size,"symbol",EA2,_,"other"),
    data_object_conflict(EA,Pt_size,"symbol",EA3,_,"other"),
    EA2 != EA3.

.decl label_conflict(EA:address,Size:unsigned,Kind:symbol)

label_conflict(EA,Pt_size,"symbol"):-
    data_object_candidate(EA,Pt_size,"symbol"),
    labeled_data_candidate(EA2),
    EA2 > EA, EA2 < EA+Pt_size.

data_object_point(EA,Pt_size,"symbol",1,"no label conflicts"):-
    data_object_candidate(EA,Pt_size,"symbol"),
    !label_conflict(EA,Pt_size,"symbol").

data_object_point(EA,Pt_size,"symbol",2,"aligned"):-
    data_object_candidate(EA,Pt_size,"symbol"),
    EA % Pt_size = 0.

data_object_point(EA,Pt_size,"symbol",4,"point-to-boundary-sym"):-
    data_object_candidate(EA,Pt_size,"symbol"),
    address_in_data_refined(EA,Dest),
    boundary_sym_expr(EA,Dest).

data_object_point(EA,Pt_size,"symbol",-2,"point-to-exception-section"):-
    data_object_candidate(EA,Pt_size,"symbol"),
    address_in_data_refined(EA,Dest),
    exception_section(Name),
    loaded_section(Base,End,Name),
    Dest >= Base, Dest < End.

data_object_point(EA,Pt_size,"symbol",-1,"point-to-special-section"):-
    data_object_candidate(EA,Pt_size,"symbol"),
    address_in_data_refined(EA,Dest),
    special_data_section(Name),
    loaded_section(Base,End,Name),
    Dest >= Base, Dest < End.

data_object_point(EA,Pt_size,"symbol",10,"has relocation"):-
    data_object_candidate(EA,Pt_size,"symbol"),
    relocation(EA,Type,_,_,_,_,_),
    Type != "ABSOLUTE".

data_object_point(EA,Pt_size,"symbol",-10,"has no relocation"):-
    !binary_type("EXEC"),
    data_object_candidate(EA,Pt_size,"symbol"),
    !relocation(EA,_,_,_,_,_,_).

// Points for well-defined strings:
data_object_point(EA,Size,"string",2,"string basic point"):-
    data_object_candidate(EA,Size,"string").

data_object_point(EA,Size,"string",3,"long string"):-
    data_object_candidate(EA,Size,"string"),
    string_candidate(EA,End,_),
    string_candidate(Beg,End,_), End-Beg > 5.

data_object_point(EA,Size,"string",-2,"string in jump table"):-
    data_object_candidate(EA,Size,"string"),
    preferred_data_access(EA,_,EA_ref),
    jump_table_start(_,_,EA_ref,_,_).

// data access negative heuristic
data_object_point(EA,Size,"other",4,"data access"):-
    data_object_candidate(EA,Size,"other"),
    Size < 16.

//sometimes we load pointers into xmm
data_object_point(EA,Size,"other",1,"data access xmm"):-
    data_object_candidate(EA,Size,"other"),
    Size >= 16.

//range mismatch
data_object_conflict(EA,Size,Type,EA2,Size2,Type2):-
    data_object_candidate(EA,Size,Type),
    data_object_candidate(EA2,Size2,Type2),
    EA2 > EA,
    EA2 < EA+Size.

//size mismatch
data_object_conflict(EA,Size,Type,EA,Size2,Type2):-
    data_object_candidate(EA,Size,Type),
    data_object_candidate(EA,Size2,Type2),
    Size2 > Size.

//type mismatch
data_object_conflict(EA,Size,Type,EA,Size,Type2):-
    data_object_candidate(EA,Size,Type),
    data_object_candidate(EA,Size,Type2),
    Type != Type2.

// Destination collides with another candidate.
data_object_conflict(EA,Size,Type,EA2,Size2,Type2):-
    binary_format("PE"), binary_isa("X86"),
    // Candidate references another data location,
    data_object_candidate(EA,Size,Type),
    address_in_data_refined(EA,Val),
    // but would collide with another candidate symbol at that location.
    data_object_candidate(EA2,Size2,Type2),
    Val > EA2,
    Val < EA2+Size2.

.decl data_object_total_points(EA:address,Size:unsigned,Type:symbol,Points:number)

data_object_total_points(EA,Size,Type,Points):-
    data_object_candidate(EA,Size,Type),
    Points = sum X:{data_object_point(EA,Size,Type,X,_)}.

data_object(EA,Size,Type):-
    data_object_total_points(EA,Size,Type,Points),
    !discarded_data_object(EA,Size,Type),
    Points >= 0.

discarded_data_object(EA_f,Size_f,Type_f):-
    data_object_conflict(EA,Size,Type,EA2,Size2,Type2),
    data_object_total_points(EA,Size,Type,Points1),
    data_object_total_points(EA2,Size2,Type2,Points2),
    (
        Points1 < Points2,
        EA_f = EA,
        Size_f = Size,
        Type_f = Type
        ;
        Points1 > Points2,
        EA_f = EA2,
        Size_f = Size2,
        Type_f = Type2
    ).

// predicates to export

symbolic_data(EA,Size,as(Val,address)):-
    data_object(EA,Size,"symbol"),
    address_in_data_refined(EA,Val).

symbol_minus_symbol(EA,Size,Symbol1,Symbol2,Scale,Offset):-
    data_object(EA,Size,"symbol-symbol"),
    symbol_minus_symbol_candidate(EA,Size,Symbol1,Symbol2,Scale,Offset).

code_pointer_in_data(EA,Val):-
    symbolic_data(EA,_,Val),
    block(Val).



///////////////////////////////////////////////////////////////////////////////////////////
// Final label decision

labeled_ea(EA):-
    !binary_isa("ARM"),
    defined_symbol(EA,_,Type,_,_,_,_,_,_),
    Type != "SECTION",
    EA != 0.

labeled_ea(EA):-
    symbolic_operand(Src,_,EA,_),
    !moved_label(Src,_,EA,_).

labeled_ea(EA):-
    symbolic_data(Src,_,EA),
    !moved_data_label(Src,_,EA,_).

labeled_ea(EA_moved):-
    moved_label(_,_,_,EA_moved).

labeled_ea(New_dest):-
    moved_data_label(_,_,_,New_dest).

labeled_ea(EA):-
    symbol_minus_symbol(Src,_,EA,_,_,_),
    !moved_data_label(Src,_,EA,_).

labeled_ea(EA):-
    symbol_minus_symbol(Src,_,_,EA,_,_),
    !moved_data_label(Src,_,EA,_).

labeled_ea(EA):-
    fde_entry(_,_,_,_,_,EA).

labeled_ea(TargetEA):-
    // Generate labels for empty symbolic expressions
    symbolic_expr_from_relocation(_,_,"",_,TargetEA).

data_object_boundary(EA):-
    labeled_ea(EA);
    symbolic_data(EA,_,_);
    string(EA,_,_);
    symbol_minus_symbol(EA,_,_,_,_,_);
    symbolic_expr_from_relocation(EA,_,_,_,_);
    moved_data_label(EA,_,_,_).

/////////////////////////////////////////////////////////////////////////////////
// This facts specifies that a label should be printed in the .bss section for
// the given address (because it is referenced somewhere)

bss_data(Base),
bss_data(End):-
    bss_section(SectionName),
    loaded_section(Base,End,SectionName).

bss_data(EA):-
    labeled_ea(EA),
    bss_section(SectionName),
    loaded_section(Base,End,SectionName),
    EA >= Base,
    EA < End.

///////////////////////////////////////////////////////////////////////
// Final symbolic expressions in terms of symbols


symbolic_expr(EA,Size,Symbol,Offset):-
    symbolic_expr_from_relocation(EA,Size,Symbol,Offset,_),
    // Empty symbols must have a symbol name inferred.
    Symbol != "".

symbolic_expr(EA,Size,Symbol,Offset):-
    symbolic_expr_from_relocation(EA,Size,"",Offset,TargetEA),
    best_symexpr_symbol(TargetEA,Symbol,_).

symbolic_expr_symbol_minus_symbol(EA,Size,SymbolName1,SymbolName2,Scale,Offset):-
    symbol_minus_symbol_from_relocation(EA,Size,SymbolName1,SymbolName2,Scale,Offset).

// Symbol-Symbol
symbolic_expr_symbol_minus_symbol(EA,Size,SymbolName1,SymbolName2,Scale,FinalOffset):-
    symbol_minus_symbol(EA,Size,Symbol1,Symbol2,Scale,Offset),
    !symbolic_expr_from_relocation(EA,_,_,_,_),
    !symbol_minus_symbol_from_relocation(EA,_,_,_,_,_),
    (
        moved_data_label(EA,Size,Symbol1,NewSymbol1),
        Offset1 = Offset + as(NewSymbol1,number)- as(Symbol1,number)
        ;
        !moved_data_label(EA,_,Symbol1,_),
        NewSymbol1 = Symbol1,
        Offset1 = Offset
    ),
    (
        moved_data_label(EA,Size,Symbol2,NewSymbol2),
        FinalOffset = Offset1 + as(Symbol2,number) - as(NewSymbol2,number)
        ;
        !moved_data_label(EA,_,Symbol2,_),
        NewSymbol2 = Symbol2,
        FinalOffset = Offset1
    ),
    (
        NewSymbol1 = NewSymbol2, Symbol1Loc = Symbol2Loc;
        NewSymbol1 != NewSymbol2, Symbol1Loc = "Beg"
    ),
    best_symexpr_symbol(NewSymbol1,SymbolName1,Symbol1Loc),
    (
        boundary_sym_expr(EA,NewSymbol2), Symbol2Loc = "End"
        ;
        !boundary_sym_expr(EA,NewSymbol2), Symbol2Loc = "Beg"
    ),
    best_symexpr_symbol(NewSymbol2,SymbolName2,Symbol2Loc).

// Symbolic operands
symbolic_expr(EA+InstrOffset,Size,SymbolName,Offset):-
    moved_label(EA,Index,Dest,FinalDest),
    (
        instruction_immediate_offset(EA,Index,InstrOffset,Size);
        instruction_displacement_offset(EA,Index,InstrOffset,Size)
    ),
    !symbolic_expr_from_relocation(EA+InstrOffset,_,_,_,_),
    !symbol_minus_symbol_from_relocation(EA+InstrOffset,_,_,_,_,_),
    !symbol_minus_symbol(EA+InstrOffset,_,_,_,_,_),
    Offset = as(Dest,number) - as(FinalDest,number),
    best_symexpr_symbol(FinalDest,SymbolName,"Beg").

symbolic_expr(EA+InstrOffset,Size,SymbolName,0):-
    symbolic_operand(EA,Index,Dest,_),
    !moved_label(EA,Index,_,_),
    (
        instruction_immediate_offset(EA,Index,InstrOffset,Size);
        instruction_displacement_offset(EA,Index,InstrOffset,Size)
    ),
    !symbolic_expr_from_relocation(EA+InstrOffset,_,_,_,_),
    !symbol_minus_symbol_from_relocation(EA+InstrOffset,_,_,_,_,_),
    !symbol_minus_symbol(EA+InstrOffset,_,_,_,_,_),
    (
        boundary_sym_expr(EA+InstrOffset,Dest), SymbolLoc = "End"
        ;
        !boundary_sym_expr(EA+InstrOffset,Dest), SymbolLoc = "Beg"
    ),
    best_symexpr_symbol(Dest,SymbolName,SymbolLoc).


// Symbolic data
symbolic_expr(EA,Size,SymbolName,Offset):-
    moved_data_label(EA,Size,Dest,FinalDest),
    !symbolic_expr_from_relocation(EA,_,_,_,_),
    !symbol_minus_symbol_from_relocation(EA,_,_,_,_,_),
    !symbol_minus_symbol(EA,_,_,_,_,_),
    Offset = as(Dest,number) - as(FinalDest,number),
    best_symexpr_symbol(FinalDest,SymbolName,"Beg").

symbolic_expr(EA,Size,SymbolName,0):-
    symbolic_data(EA,Size,Dest),
    !symbolic_expr_from_relocation(EA,_,_,_,_),
    !symbol_minus_symbol_from_relocation(EA,_,_,_,_,_),
    !symbol_minus_symbol(EA,_,_,_,_,_),
    !moved_data_label(EA,_,_,_),
    (
        boundary_sym_expr(EA,Dest), SymbolLoc = "End"
        ;
        !boundary_sym_expr(EA,Dest), SymbolLoc = "Beg"
    ),
    best_symexpr_symbol(Dest,SymbolName,SymbolLoc).


symbolic_expr_attribute(EA+InstrOffset,Attr):-
    symbolic_operand_attribute(EA,Index,Attr),
    (
        instruction_immediate_offset(EA,Index,InstrOffset,_);
        instruction_displacement_offset(EA,Index,InstrOffset,_)
    ).
