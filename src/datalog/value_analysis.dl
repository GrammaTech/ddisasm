//===- value_analysis.dl ------------------------------------*- datalog -*-===//
//
//  Copyright (C) 2019 GrammaTech, Inc.
//
//  This code is licensed under the GNU Affero General Public License
//  as published by the Free Software Foundation, either version 3 of
//  the License, or (at your option) any later version. See the
//  LICENSE.txt file in the project root for license terms or visit
//  https://www.gnu.org/licenses/agpl.txt.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  GNU Affero General Public License for more details.
//
//  This project is sponsored by the Office of Naval Research, One Liberty
//  Center, 875 N. Randolph Street, Arlington, VA 22203 under contract #
//  N68335-17-C-0700.  The content of the information does not necessarily
//  reflect the position or policy of the Government and no official
//  endorsement should be inferred.
//
//===----------------------------------------------------------------------===//
/**
This module performs a basic value analysis.

The value of a register at a point (ea) is expressed as the value of another
at another point (EA_reg1)  multiplied by a multiplier plus an offset:

 val(Reg,EA) = val(Reg1,EA_reg1)* Multiplier+ Offset

In some cases we can obtain a term of the form:

- val(Reg,EA) =  Offset

If we can obtain that the register is assigned a constant

- val(Reg,EA) = Unknown * Multiplier+ Offset

If we detect a loop where the register gets incremented 'Multiplier' in each iteration

The analysis first computes `value_reg_edge` which are facts of the form
above defined for different instruction and using the def-use chains.

Then, we have a propagation phase where `value_reg` is computed. This
phase chains individual `value_reg_edge` together.  In addition to
chaining edges together it takes care of cases such as two registers
added together or substracted if it turns out that they can be
expressed in terms of the same register.  It also detects possible
loops.

This propagation is limited in the number of steps using `step_limit`
to ensure termination and efficiency.

As a result, we might obtain more than one 'value' for a certain
register at a certain location. best_value_reg selects only one of
these values prioritizing the two special cases from above (constant
or loop) and considering the value with most steps.

*/

.decl value_reg_edge(EA:address,Reg:register,
                EA_reg1:address,Reg1:register,Multiplier:number,Offset:number)
.decl value_reg(EA:address,Reg:register,
                EA_reg1:address,Reg1:reg_nullable,Multiplier:number,Offset:number,Steps:unsigned)

.decl best_value_reg(EA:address,Reg:register,EA_from:address,Multiplier:number,Offset:number,type:symbol)

/**
For logical right shift in 32-bit ISA, the LHS value's upper 32-bit
needs to be masked out.
*/
.decl bshru_wrapper(Lhs:number,Rhs:number,Res:number) inline

bshru_wrapper(Lhs,Rhs,Res):-
    arch.pointer_size(PtSize),
    Lhs_prime = Lhs band as((1 bshl (PtSize*8)) - 1,number),
    Res = Lhs_prime bshru Rhs.

// Connect values that are stored to and then loaded from the stack.
value_reg_edge(EALoad,Reg2,EAPrev,Reg1,1,0):-
    stack_def_use.def_used(EAStore,[RegBaseStore,StackPosStore],EALoad,[RegBaseLoad,StackPosLoad],_),
    arch.store(EAStore,_,_,Reg1,RegBaseStore,"NONE",_,StackPosStore),
    arch.load(EALoad,_,_,Reg2,RegBaseLoad,"NONE",_,StackPosLoad),
    reg_def_use.def_used(EAPrev,Reg1,EAStore,_).

//mov reg reg_origin
value_reg_edge(EA,Reg,EA_prev,Reg_origin,1,0):-
    def_used_for_address(EA_prev,Reg_origin,_),
    reg_def_use.def_used(EA_prev,Reg_origin,EA,_),
    arch.move_reg_reg(EA,Reg,Reg_origin),
    track_register(Reg),
    EA != EA_prev.

// basic arithmetic operations
value_reg_edge(EA,Dst,EA_prev,Src,Mult,Immediate):-
    def_used_for_address(EA_prev,Src,_),
    reg_def_use.def_used(EA_prev,Src,EA,_),
    arch.reg_arithmetic_operation(EA,Dst,Src,Mult,Immediate),
    track_register(Dst).

/** A register is defined using an unknown value
 This predicate is used to create trivial leaf edges in
 the value_reg graph `step_limit` .*/
.decl value_reg_unsupported(EA:address, Reg:register)

// Load a register from a non-constant memory address
value_reg_unsupported(EA,Reg):-
    def_used_for_address(EA,Reg,_),
    arch.load(EA,_,_,Reg,RegBase,RegIndex,_,_),
    (
        RegBase != "NONE",
        RegIndex = RegIndex // avoid warning
        ;
        RegIndex != "NONE",
        RegBase = RegBase // avoid warning
    ).

// Load a register from a register that is not tracked
value_reg_unsupported(EA,Reg):-
    def_used_for_address(EA,Reg,_),
    arch.move_reg_reg(EA,Dst,Src),
    track_register(Dst),
    !track_register(Src).

// Register defined in a call
value_reg_unsupported(EA,Reg):-
    def_used_for_address(EA,Reg,_),
    arch.call(EA,_).


///////////////////////////////////////////////////////////////////////////////////////
// constant value_reg
///////////////////////////////////////////////////////////////////////////////////////

// mov reg immediate
value_reg(EA,Reg,EA,"NONE",0,Immediate,1):-
    def_used_for_address(EA,Reg,_),
    (
        arch.move_reg_imm(EA,Reg,Immediate,_),
        !instruction_has_relocation(EA,_)
    ;
        instruction_has_relocation(EA,EA_rel),
        symbolic_expr_from_relocation(EA_rel,_,_,_,Address),
        Immediate = as(Address,number)
    ).

// load immediate from stack
value_reg(EALoad,Reg2,EALoad,"NONE",0,Immediate,1):-
    arch.store_immediate(EAStore,_,_,Immediate,RegBaseStore,"NONE",_,StackPosStore),
    stack_def_use.def_used(EAStore,[RegBaseStore,StackPosStore],EALoad,[RegBaseLoad,StackPosLoad],_),
    arch.load(EALoad,_,_,Reg2,RegBaseLoad,"NONE",_,StackPosLoad),
    def_used_for_address(EALoad,Reg2,_).

//reset a register
value_reg(EA,Reg,EA,"NONE",0,0,1):-
    def_used_for_address(EA,Reg,_),
    is_xor_reset(EA).

// register implicitly defined
value_reg(EA,Reg,EA,"NONE",0,Immediate,1):-
    def_used_for_address(EA,Reg,_),
    reg_def_use.flow_def(EA,Reg,_,Immediate).

// pc-relative LEA
value_reg(EA,Reg,EA,"NONE",0,Address,1):-
    code(EA),
    arch.reg_arithmetic_operation(EA,Reg,PcReg,1,Offset),
    instruction(EA,Size,_,_,_,_,_,_,_,_),
    !instruction_has_relocation(EA,_),
    arch.pc_reg(PcReg),
    track_register(Reg),
    Address = as(EA+Size,number)+Offset.

value_reg(EA,Reg,EA,"NONE",0,as(Val,number),1):-
    arch.pc_relative_addr(EA,Reg,Val),
    track_register(Reg).

// Load QWORD or DWORD from memory using a simple_data_access_pattern
// That is, a data access that does not require value_reg to be computed.
value_reg(EA,Reg,EA,"NONE",0,Val,1):-
    def_used_for_address(EA,Reg,_),
    arch.load(EA,SrcOp,_,Reg,_,_,_,_),
    simple_data_access_pattern(MemAddr,SrcOp,Size,EA),
    4 <= Size, Size <= 8,
    (
        data_word(MemAddr,Size,Val),
        !symbolic_expr_from_relocation(MemAddr,_,_,_,_)
        ;
        symbolic_expr_from_relocation(MemAddr,Size, Symbol, _, TargetAddr),
        defined_symbol(_,_,_,_,_,_,_,_,Symbol),
        Val = as(TargetAddr,number)
    ),
    Val >= 0.

// Load QWORD or DWORD from memory where memory is accessed using a register
// but the register has a constant value.
value_reg(EA,Reg,EA,"NONE",0,Val,1):-
    const_value_reg_used(EA,_,_,BaseReg,RegVal),
    arch.load(EA,SrcOp,_,Reg,BaseReg,"NONE",_,Offset),
    def_used_for_address(EA,Reg,_),
    instruction_memory_access_size(EA,SrcOp,Size),

    RegVal + Offset >= 0,
    MemAddr = as(RegVal + Offset,address),
    4 <= Size, Size <= 8,
    (
        data_word(MemAddr,Size,Val),
        !symbolic_expr_from_relocation(MemAddr,_,_,_,_)
        ;
        symbolic_expr_from_relocation(MemAddr,Size, Symbol, _, TargetAddr),
        defined_symbol(_,_,_,_,_,_,_,_,Symbol),
        Val = as(TargetAddr,number)
    ),
    Val >= 0.

/**
Constant folding for bitwise operations (reg op reg)
*/
value_reg(EA,DstReg,EA,"NONE",0,Val,Steps3):-
    step_limit(StepLimit),
    arch.reg_reg_bitwise_binary_op(EA,DstReg,SrcReg1,SrcReg2,Op),
    reg_def_use.def_used(EA_def1,SrcReg1,EA,_),
    reg_def_use.def_used(EA_def2,SrcReg2,EA,_),
    value_reg(EA_def1,SrcReg1,EA_def1,"NONE",0,SrcVal1,Steps1),
    Steps1 <= StepLimit-3,
    value_reg(EA_def2,SrcReg2,EA_def2,"NONE",0,SrcVal2,Steps2),
    Steps2 <= StepLimit-3,
    (
        Op = "ASR", Val = SrcVal1 bshr  SrcVal2;
        Op = "LSR", bshru_wrapper(SrcVal1,SrcVal2,Val);
        Op = "LSL", Val = SrcVal1 bshl  SrcVal2;
        Op = "AND", Val = SrcVal1 band  SrcVal2;
        Op = "OR",  Val = SrcVal1 bor   SrcVal2;
        Op = "XOR", Val = SrcVal1 bxor  SrcVal2
    ),
    Steps3 = max(Steps1,Steps2)+2.

/**
Constant folding for bitwise operations (reg op imm)
*/
value_reg(EA,DstReg,EA,"NONE",0,Val,Steps+1):-
    step_limit(StepLimit),
    arch.reg_imm_bitwise_binary_op(EA,DstReg,SrcReg,Imm,Op),
    reg_def_use.def_used(EA_def,SrcReg,EA,_),
    value_reg(EA_def,SrcReg,EA_def,"NONE",0,SrcVal,Steps),
    Steps <= StepLimit-1,
    (
        Op = "ASR", Val = SrcVal bshr  Imm;
        Op = "LSR", bshru_wrapper(SrcVal,Imm,Val);
        Op = "LSL", Val = SrcVal bshl  Imm;
        Op = "AND", Val = SrcVal band  Imm;
        Op = "OR",  Val = SrcVal bor   Imm;
        Op = "XOR", Val = SrcVal bxor  Imm
    ).

// GOT-relative LEA. (Note that we drop the GOT Register.)
value_reg(EA,Reg,EA,"NONE",0,Address,1):-
    binary_format("ELF"),
    got_relative_operand(EA,1,Offset),
    instruction(EA,_,_,"LEA",_,Op2,0,0,_,_),
    op_regdirect_contains_reg(Op2,Reg),
    track_register(Reg),
    Address = as(Offset,number).

///////////////////////////////////////////////////////////////////////////////////////
// once we have the edges that relate the values of registers at different
// instructions we propagate these values forward

.decl step_limit(Limit:unsigned)

step_limit(12).

// subsumption for value_reg:
// for two value_reg that differ only by step count, the lower step count subsumes the other.
value_reg(EA,Reg,EA_reg1,Reg1,Multiplier,Offset,Steps1) <= value_reg(EA,Reg,EA_reg1,Reg1,Multiplier,Offset,Steps2):-
    Steps2 <= Steps1.

value_reg(EA,Reg,EA,Reg,1,0,1):-
    def_used_for_address(EA,Reg,_),
    value_reg_unsupported(EA,Reg).

// possible loop
value_reg(EA,Reg,EA_from,"Unknown",Immediate,Base,Steps+1):-
    step_limit(StepLimit),
    value_reg(EA,Reg,EA_from,"NONE",0,Base,Steps),
    Steps <= StepLimit-2,
    value_reg_edge(EA,Reg,EA,Reg,1,Immediate),
    Immediate != 0.

/**
This is an auxiliary predicate used for computing `value_reg`.
It captures an instruction at `EA` that defines register `Reg_def` by operating
with two register `Reg1` and `Reg2` defined at `EA_def1` and `EA_def1`.

The operation is Reg_def = Reg1 + Reg2 * Mult + Offset.
*/
.decl reg_reg_arithmetic_operation_defs(EA:address,Reg_def:register,EA_def1:address,Reg1:register,EA_def2:address,Reg2:register,Mult:number,Offset:number)

reg_reg_arithmetic_operation_defs(EA,Reg_def,EA_def1,Reg1,EA_def2,Reg2,Mult,Offset):-
    def_used_for_address(EA,Reg_def,_),
    arch.reg_reg_arithmetic_operation(EA,Reg_def,Reg1,Reg2,Mult,Offset),
    Reg1 != Reg2,
    reg_def_use.def_used(EA_def1,Reg1,EA,_),
    EA != EA_def1,
    reg_def_use.def_used(EA_def2,Reg2,EA,_),
    EA != EA_def2.

.plan 1: (3,1,2,4), 2: (4,1,2,3)

// deal with arithmetic operations on two registers when their value ultimately refers to the same register
value_reg(EA,Reg_def,EA_third,Reg3,Mult1+(Mult*Mult2),Offset+Offset1+Offset2*Mult,Steps3):-
    step_limit(StepLimit),
    reg_reg_arithmetic_operation_defs(EA,Reg_def,EA_def1,Reg1,EA_def2,Reg2,Mult,Offset),
    value_reg(EA_def1,Reg1,EA_third,Reg3,Mult1,Offset1,Steps1),
    Steps1 <= StepLimit-3,
    EA != EA_third,
    value_reg(EA_def2,Reg2,EA_third,Reg3,Mult2,Offset2,Steps2),
    Steps2 <= StepLimit-3,
    Steps3 = max(Steps1,Steps2)+2.

// deal with arithmetic operation on two registers when one of the registers contains a constant
value_reg(EA,Reg_def,EA_third,Reg3,Mult*Mult2,Offset+Offset1+Offset2*Mult,Steps3):-
    step_limit(StepLimit),
    reg_reg_arithmetic_operation_defs(EA,Reg_def,EA_def1,Reg1,EA_def2,Reg2,Mult,Offset),
    value_reg(EA_def1,Reg1,_,"NONE",_,Offset1,Steps1),
    Steps1 <= StepLimit-3,
    value_reg(EA_def2,Reg2,EA_third,Reg3,Mult2,Offset2,Steps2),
    Steps2 <= StepLimit-3,
    EA != EA_third,
    Reg3 != "NONE",
    Steps3 = max(Steps1,Steps2)+2.

// the other register constains a constant.
value_reg(EA,Reg_def,EA_third,Reg3,Mult1,Offset+Offset1+Offset2*Mult,Steps3):-
    step_limit(StepLimit),
    reg_reg_arithmetic_operation_defs(EA,Reg_def,EA_def1,Reg1,EA_def2,Reg2,Mult,Offset),
    value_reg(EA_def2,Reg2,_,"NONE",_,Offset2,Steps2),
    Steps2 <= StepLimit-3,
    value_reg(EA_def1,Reg1,EA_third,Reg3,Mult1,Offset1,Steps1),
    Steps1 <= StepLimit-3,
    Reg3 != "NONE",
    EA != EA_third,
    Steps3 = max(Steps1,Steps2)+2.

// normal forward propagation
value_reg(EA1,Reg1,EA3,Reg3,Multiplier*Multiplier2,(Offset2*Multiplier)+Offset,Steps+1):-
    step_limit(StepLimit),
    value_reg(EA2,Reg2,EA3,Reg3,Multiplier2,Offset2,Steps),
    Steps <= StepLimit - 2,
    value_reg_edge(EA1,Reg1,EA2,Reg2,Multiplier,Offset),
    EA1 > EA2.

// normal backward propagation
value_reg(EA1,Reg1,EA3,Reg3,Multiplier*Multiplier2,(Offset2*Multiplier)+Offset,Steps+5):-
    step_limit(StepLimit),
    value_reg(EA2,Reg2,EA3,Reg3,Multiplier2,Offset2,Steps),
    Steps <= StepLimit - 6,
    value_reg_edge(EA1,Reg1,EA2,Reg2,Multiplier,Offset),
    EA1 < EA2.

// For a given EA, Reg, EA_from and Multiplier we keep the minimum and maximum offsets
best_value_reg(EA,Reg,EA_from,Multiplier,MinOffset,"loop"):-
    value_reg(EA,Reg,EA_from,"Unknown",Multiplier,MinOffset,_),
    MinOffset <= min Offset:{value_reg(EA,Reg,EA_from,"Unknown",Multiplier,Offset,_)}.

best_value_reg(EA,Reg,EA_from,Multiplier,MaxOffset,"loop"):-
    value_reg(EA,Reg,EA_from,"Unknown",Multiplier,MaxOffset,_),
    MaxOffset >= max Offset:{value_reg(EA,Reg,EA_from,"Unknown",Multiplier,Offset,_)}.

best_value_reg(EA,Reg,EA_from,Multiplier,Offset,"complete"):-
    value_reg(EA,Reg,EA_from,"NONE",Multiplier,Offset,_),
    !value_reg(EA,Reg,_,"Unknown",_,_,_).

.decl value_reg_max_mult(EA:address,Reg:register,MaxMult:number)

value_reg_max_mult(EA,Reg,MaxMult):-
    reg_def_use.def(EA,Reg),
    !value_reg(EA,Reg,_,"Unknown",_,_,_),
    MaxMult = max Multiplier:{value_reg(EA,Reg,_,_,Multiplier,_,_)}.

best_value_reg(EA,Reg,0,MaxMultiplier,Offset,"incomplete"):-
    value_reg_max_mult(EA,Reg,MaxMultiplier),
    value_reg(EA,Reg,_,OtherReg,MaxMultiplier,Offset,_),
    OtherReg != "NONE".

/**
A constant value is used in a data access.

EADef: The address where Value was originally defined (which may not necessarily
be where Reg is defined, if that value is moved to a different register later).

EARegDef: The address where Reg is defined as Value. Often EADef = EARegDef.
*/
.decl const_value_reg_used(UsedEA:address,EADef:address,EARegDef:address,Reg:register,Value:number)

const_value_reg_used(UsedEA,EADef,EARegDef,Reg,Value):-
    value_reg(EARegDef,Reg,EADef,"NONE",0,Value,_),
    reg_def_use.def_used(EARegDef,Reg,UsedEA,_).

/**
`AddrValue` represents the value of register `Reg` *before* `EA`.
The value should be an address.
*/
.decl value_reg_address_before(EA:address,Reg:register,AddrValue:number,Steps:unsigned)

// At the jump-table target from indirect-jump via register,
// the register should have an address value.
value_reg_address_before(EA,Reg,Address,1):-
    code(EA),
    relative_jump_table_entry(_,TableStart,_,_,EA,_,_),
    jump_table_start(EA_jump,_,TableStart,_,_),
    reg_jump(EA_jump,Reg),
    Address = as(EA,number).

// Propagate address value
value_reg_address_before(UsedEA,Reg,Address+Offset,Steps+1):-
    step_limit(StepLimit),
    value_reg_address_before(EADef,RegDef,Address,Steps),
    Steps < StepLimit,
    reg_def_use.def_used(EADef,Reg,UsedEA,_),
    arch.reg_arithmetic_operation(EADef,Reg,RegDef,1,Offset),
    track_register(Reg).
